from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio

from core.database import Database
from core.keyboards import (
    canc        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Gold = –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ)
        user = await db.get_user(message.from_user.id)
        is_gold = user and user.get('tier') == 'gold'
        
        if is_gold:
            # –î–ª—è GOLD –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
            await db.update_video_status(saved_video_id, 'approved')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É
            from core.config import TIKTOK_RATE_PER_1000_VIEWS
            earnings = (video_data['views'] / 1000) * TIKTOK_RATE_PER_1000_VIEWS
            await db.update_video_earnings(saved_video_id, earnings)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            payout_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí∞ –ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data=f"get_payout_{saved_video_id}")]
            ])
            
            await message.answer(
                f"‚úÖ <b>TikTok –≤–∏–¥–µ–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–æ!</b>\n\n"
                f"üÜî ID –∑–∞—è–≤–∫–∏: <code>{saved_video_id}</code>\n"
                f"üéµ –ê–≤—Ç–æ—Ä: <code>@{video_data['author']}</code>\n"
                f"üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_str}\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {video_data['views']:,}\n"
                f"‚ù§Ô∏è –õ–∞–π–∫–∏: {video_data['likes']:,}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {video_data['comments']:,}\n"
                f"üîÑ –†–µ–ø–æ—Å—Ç—ã: {video_data['shares']:,}\n"
                f"‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ: {video_data['favorites']:,}\n\n"
                f"üí∞ <b>–í—ã–ø–ª–∞—Ç–∞: {earnings:.2f} ‚ÇΩ</b>\n\n"
                f"üåü –°—Ç–∞—Ç—É—Å GOLD - –≤–∏–¥–µ–æ –æ–¥–æ–±—Ä–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                reply_markup=payout_keyboard,
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"‚úÖ <b>TikTok –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                f"üÜî ID –∑–∞—è–≤–∫–∏: <code>{saved_video_id}</code>\n"
                f"üéµ –ê–≤—Ç–æ—Ä: <code>@{video_data['author']}</code>\n"
                f"üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_str}\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–¥–∞—á–∏:</b>\n"
                f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {video_data['views']:,}\n"
                f"‚ù§Ô∏è –õ–∞–π–∫–∏: {video_data['likes']:,}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {video_data['comments']:,}\n"
                f"üîÑ –†–µ–ø–æ—Å—Ç—ã: {video_data['shares']:,}\n"
                f"‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ: {video_data['favorites']:,}\n\n"
                f"‚è≥ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
                f"–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è –ø–æ–¥—Å—á–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç.",
                parse_mode="HTML"
            )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        from core.keyboards import video_moderation_keyboard
        from core.utils import send_to_admin_chatagination_keyboard
)
from core.utils import format_currency, format_timestamp, get_status_emoji, get_status_text, calculate_pages
from parsers.tiktok_parser import validate_tiktok_video, extract_tiktok_video_id
from core import config

router = Router()
db = Database(config.DATABASE_PATH)


def create_progress_bar(percent: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤–∏–∑—É–∞–ª—å–Ω–æ"""
    filled = int(percent / 10)
    empty = 10 - filled
    return f"{'üü©' * filled}{'‚¨ú' * empty} {percent}%"


async def update_progress_message(message: Message, title: str, steps: list, current_step: int, total_steps: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    percent = int((current_step / total_steps) * 100)
    progress_bar = create_progress_bar(percent)
    
    text = f"üîç <b>{title}</b>\n\n{progress_bar}\n\n"
    
    for i, step in enumerate(steps):
        if i < current_step:
            text += f"‚úÖ {step}\n"
        elif i == current_step:
            text += f"‚è≥ {step}\n"
        else:
            text += f"‚è∏Ô∏è {step}\n"
    
    try:
        await message.edit_text(text, parse_mode="HTML")
    except:
        pass


class VideoStates(StatesGroup):
    waiting_for_video_url = State()


@router.callback_query(F.data == "submit_tiktok_video")
async def submit_tiktok_video_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥–∞—á–∞ TikTok –≤–∏–¥–µ–æ"""
    tiktok = await db.get_user_tiktok(callback.from_user.id)
    
    if not tiktok or not tiktok.get('is_verified'):
        await callback.answer("‚ùå TikTok –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∏–ª–∏ –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
        return
    
    await state.set_state(VideoStates.waiting_for_video_url)
    await state.update_data(platform='tiktok')
    
    await callback.message.edit_text(
        "üé¨ <b>–ü–æ–¥–∞—á–∞ TikTok —Ä–æ–ª–∏–∫–∞</b>\n\n"
        f"üéµ –í–∞—à TikTok: <code>@{tiktok['username']}</code>\n\n"
        "üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚úÖ –í–∏–¥–µ–æ —Å –≤–∞—à–µ–≥–æ TikTok –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–µ –ø–æ–∑–∂–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥\n"
        "‚úÖ –ù–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ\n\n"
        "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à TikTok —Ä–æ–ª–∏–∫:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>https://www.tiktok.com/@username/video/123...</code>",
        reply_markup=cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(F.text == "üé¨ –ü–æ–¥–∞—Ç—å —Ä–æ–ª–∏–∫")
async def submit_video_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–¥–∞—á—É —Ä–æ–ª–∏–∫–∞ - –≤—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    from core.keyboards import video_platform_keyboard
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    tiktok = await db.get_user_tiktok(message.from_user.id)
    youtube = await db.get_user_youtube(message.from_user.id)
    
    has_tiktok = tiktok and tiktok.get('is_verified', False)
    has_youtube = youtube and youtube.get('is_verified', False)
    
    if not has_tiktok and not has_youtube:
        await message.answer(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ TikTok –∏–ª–∏ YouTube —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å.",
            parse_mode="HTML"
        )
        return
    
    platforms_text = "üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:</b>\n\n"
    
    if has_tiktok:
        platforms_text += f"üéµ <b>TikTok:</b> @{tiktok['username']}\n"
    
    if has_youtube:
        platforms_text += f"üì∫ <b>YouTube:</b> {youtube['channel_name']}\n"
    
    await message.answer(
        platforms_text,
        reply_markup=video_platform_keyboard(has_tiktok=has_tiktok, has_youtube=has_youtube),
        parse_mode="HTML"
    )


@router.message(VideoStates.waiting_for_video_url)
async def submit_video_url(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ TikTok —Ä–æ–ª–∏–∫ –∏ –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å"""
    video_url = message.text.strip()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL - –¥–æ–±–∞–≤–ª—è–µ–º https:// –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not video_url.startswith(('http://', 'https://')):
        if video_url.startswith('www.'):
            video_url = 'https://' + video_url
        elif video_url.startswith(('tiktok.com', 'vm.tiktok.com', 'vt.tiktok.com')):
            video_url = 'https://' + video_url
        else:
            video_url = 'https://www.' + video_url
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–∫–∏
    if not ('tiktok.com' in video_url.lower() or 'vm.tiktok.com' in video_url.lower() or 'vt.tiktok.com' in video_url.lower()):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –≤–∏–¥–µ–æ:\n"
            "‚Ä¢ <code>https://www.tiktok.com/@username/video/123...</code>\n"
            "‚Ä¢ <code>https://vm.tiktok.com/abc...</code>\n\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ:\n"
            "‚Ä¢ <code>tiktok.com/@username/video/123...</code>",
            reply_markup=cancel_keyboard(),
            parse_mode="HTML"
        )
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º video_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    video_id = extract_tiktok_video_id(video_url)
    if not video_id:
        await message.answer(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ –∏–∑ —Å—Å—ã–ª–∫–∏</b>\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.",
            reply_markup=cancel_keyboard(),
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –î—É–±–ª–∏–∫–∞—Ç (—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
    if await db.check_video_exists(video_url=video_url) or await db.check_video_exists(video_id=video_id):
        await message.answer(
            "‚ùå <b>–≠—Ç–æ –≤–∏–¥–µ–æ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ!</b>\n\n"
            "–ö–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º TikTok –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tiktok = await db.get_user_tiktok(message.from_user.id)
    if not tiktok or not tiktok['is_verified']:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ TikTok –∞–∫–∫–∞—É–Ω—Ç–∞!",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ
    steps = [
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TikTok",
        "–ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∞",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
    ]
    
    parsing_msg = await message.answer(
        "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ...</b>\n\n"
        "‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú 0%\n\n"
        "‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TikTok\n"
        "‚è∏Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ\n"
        "‚è∏Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∞\n"
        "‚è∏Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
        parse_mode="HTML"
    )
    
    try:
        # –®–∞–≥ 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await asyncio.sleep(0.5)
        await update_progress_message(parsing_msg, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ...", steps, 1, 4)
        
        # –®–∞–≥ 2-4: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∏–¥–µ–æ
        await update_progress_message(parsing_msg, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ...", steps, 2, 4)
        validation = await validate_tiktok_video(video_url, tiktok['username'])
        
        await update_progress_message(parsing_msg, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ...", steps, 3, 4)
        await asyncio.sleep(0.3)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–æ
        await parsing_msg.delete()
        
        if not validation['success']:
            error_code = validation.get('error_code')
            error_msg = validation.get('error')
            
            if error_code == 'wrong_author':
                await message.answer(
                    f"‚ùå <b>–í–∏–¥–µ–æ —Å —á—É–∂–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!</b>\n\n"
                    f"{error_msg}\n\n"
                    f"‚úÖ –í–∞—à TikTok: <code>@{tiktok['username']}</code>\n"
                    f"‚ùå –ê–≤—Ç–æ—Ä –≤–∏–¥–µ–æ: <code>@{validation.get('video_data', {}).get('author', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}</code>",
                    parse_mode="HTML"
                )
            elif error_code == 'too_old':
                await message.answer(
                    f"‚ùå <b>–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ!</b>\n\n"
                    f"{error_msg}\n\n"
                    f"‚è∞ –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤.",
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ</b>\n\n"
                    f"{error_msg}",
                    parse_mode="HTML"
                )
            
            await state.clear()
            return
        
        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
        video_data = validation['video_data']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (channel_id = 0 –¥–ª—è TikTok, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É channels)
        saved_video_id = await db.add_video(
            user_id=message.from_user.id,
            channel_id=0,  # –î–ª—è TikTok –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º channels
            video_url=video_url,
            video_id=video_data['video_id'],
            author=video_data['author'],
            published_at=video_data['published_at'].isoformat() if video_data['published_at'] else None,
            views=video_data['views'],
            likes=video_data['likes'],
            comments=video_data['comments'],
            shares=video_data['shares'],
            favorites=video_data['favorites']
        )
        
        if not saved_video_id:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –≤–∏–¥–µ–æ —É–∂–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.",
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.update_user_stats(message.from_user.id, videos=1)
        
        # –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!
        published_str = video_data['published_at'].strftime('%d.%m.%Y %H:%M') if video_data['published_at'] else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        await message.answer(
            f"‚úÖ <b>TikTok –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üÜî ID –∑–∞—è–≤–∫–∏: <code>{saved_video_id}</code>\n"
            f"üéµ –ê–≤—Ç–æ—Ä: <code>@{video_data['author']}</code>\n"
            f"üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_str}\n\n"
            f"ÔøΩ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–¥–∞—á–∏:</b>\n"
            f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {video_data['views']:,}\n"
            f"‚ù§Ô∏è –õ–∞–π–∫–∏: {video_data['likes']:,}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {video_data['comments']:,}\n"
            f"üîÑ –†–µ–ø–æ—Å—Ç—ã: {video_data['shares']:,}\n"
            f"‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ: {video_data['favorites']:,}\n\n"
            f"‚è≥ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
            f"–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è –ø–æ–¥—Å—á–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç.",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        from core.keyboards import video_moderation_keyboard
        from core.utils import send_to_admin_chat
        
        if is_gold:
            # –î–ª—è GOLD - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–∏
            from core.config import TIKTOK_RATE_PER_1000_VIEWS
            earnings = (video_data['views'] / 1000) * TIKTOK_RATE_PER_1000_VIEWS
            await send_to_admin_chat(
                message.bot,
                f"üåü <b>GOLD: –í–∏–¥–µ–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–æ</b>\n\n"
                f"ÔøΩ {message.from_user.full_name} (@{message.from_user.username})\n"
                f"üÜî Video ID: <code>{saved_video_id}</code>\n\n"
                f"üéµ TikTok: <code>@{video_data['author']}</code>\n"
                f"üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_str}\n"
                f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {video_data['views']:,}\n"
                f"üí∞ –í—ã–ø–ª–∞—Ç–∞: {earnings:.2f} ‚ÇΩ\n"
                f"üîó {video_url}"
            )
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö - –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            await send_to_admin_chat(
                message.bot,
                f"ÔøΩüîî <b>–ù–æ–≤–æ–µ TikTok –≤–∏–¥–µ–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
                f"üÜî User ID: <code>{message.from_user.id}</code>\n"
                f"üÜî Video ID: <code>{saved_video_id}</code>\n\n"
                f"üéµ TikTok: <code>@{video_data['author']}</code>\n"
                f"üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_str}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {video_url}\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"üëÅ {video_data['views']:,} | ‚ù§Ô∏è {video_data['likes']:,} | "
                f"üí¨ {video_data['comments']:,} | üîÑ {video_data['shares']:,}",
                reply_markup=video_moderation_keyboard(saved_video_id)
            )
        
        await state.clear()
        
    except Exception as e:
        await parsing_msg.delete()
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ</b>\n\n"
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏: {str(e)[:200]}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await state.clear()


@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_history(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–æ–∫"""
    await show_history_page(message, page=1)


async def show_history_page(message: Message, page: int = 1):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏"""
    items_per_page = 5
    offset = (page - 1) * items_per_page
    
    videos = await db.get_user_videos(message.from_user.id, limit=items_per_page, offset=offset)
    total_videos = await db.get_video_count(message.from_user.id)
    total_pages = calculate_pages(total_videos, items_per_page)
    
    if not videos:
        await message.answer(
            "üì≠ <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç–∞</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤.",
            parse_mode="HTML"
        )
        return
    
    history_text = f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫</b>\n\n"
    
    for video in videos:
        status_emoji = get_status_emoji(video['status'])
        status_text = get_status_text(video['status'])
        created_at = format_timestamp(video['created_at'])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º TikTok –∞–≤—Ç–æ—Ä–∞ –≤–º–µ—Å—Ç–æ –∫–∞–Ω–∞–ª–∞
        author_display = f"@{video['video_author']}" if video.get('video_author') else video.get('channel_name', 'TikTok')
        
        history_text += (
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üÜî ID: <code>{video['id']}</code>\n"
            f"üéµ –ê–≤—Ç–æ—Ä: <code>{author_display}</code>\n"
            f"üîó –°—Å—ã–ª–∫–∞: {video['video_url'][:50]}...\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"  üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {video['views']:,}\n"
            f"  ‚ù§Ô∏è –õ–∞–π–∫–∏: {video.get('likes', 0):,}\n"
            f"  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {video.get('comments', 0):,}\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_currency(video['earnings'])}\n"
            f"{status_emoji} –°—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n"
            f"üìÖ –ü–æ–¥–∞–Ω–æ: {created_at}\n"
        )
    
    history_text += f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    history_text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"
    
    keyboard = pagination_keyboard(page, total_pages, "history") if total_pages > 1 else None
    
    await message.answer(history_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data.startswith("history_page_"))
async def history_pagination(callback: CallbackQuery):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏"""
    page = int(callback.data.split("_")[2])
    
    items_per_page = 5
    offset = (page - 1) * items_per_page
    
    videos = await db.get_user_videos(callback.from_user.id, limit=items_per_page, offset=offset)
    total_videos = await db.get_video_count(callback.from_user.id)
    total_pages = calculate_pages(total_videos, items_per_page)
    
    history_text = f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫</b>\n\n"
    
    for video in videos:
        status_emoji = get_status_emoji(video['status'])
        status_text = get_status_text(video['status'])
        created_at = format_timestamp(video['created_at'])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º TikTok –∞–≤—Ç–æ—Ä–∞ –≤–º–µ—Å—Ç–æ –∫–∞–Ω–∞–ª–∞
        author_display = f"@{video['video_author']}" if video.get('video_author') else video.get('channel_name', 'TikTok')
        
        history_text += (
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üÜî ID: <code>{video['id']}</code>\n"
            f"üéµ –ê–≤—Ç–æ—Ä: <code>{author_display}</code>\n"
            f"üîó –°—Å—ã–ª–∫–∞: {video['video_url'][:50]}...\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"  üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {video['views']:,}\n"
            f"  ‚ù§Ô∏è –õ–∞–π–∫–∏: {video.get('likes', 0):,}\n"
            f"  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {video.get('comments', 0):,}\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_currency(video['earnings'])}\n"
            f"{status_emoji} –°—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n"
            f"üìÖ –ü–æ–¥–∞–Ω–æ: {created_at}\n"
        )
    
    history_text += f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    history_text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"
    
    keyboard = pagination_keyboard(page, total_pages, "history")
    
    await callback.message.edit_text(history_text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("get_payout_"))
async def process_auto_payout(callback: CallbackQuery):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–ø–ª–∞—Ç–∞ –¥–ª—è GOLD –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    video_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
    video = await db.get_video(video_id)
    if not video:
        await callback.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if video['user_id'] != callback.from_user.id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –≤–∏–¥–µ–æ!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(callback.from_user.id)
    if not user or user.get('tier') != 'gold':
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è GOLD —Å—Ç–∞—Ç—É—Å–∞!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ
    if video['status'] != 'approved':
        await callback.answer("‚ùå –í–∏–¥–µ–æ –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–æ!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –≤—ã–ø–ª–∞—Ç–∞
    if video['earnings'] <= 0:
        await callback.answer("‚ùå –ù–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (Crypto Pay)
    from core.crypto_pay import crypto_pay_manager
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–±–ª–∏ –≤ USDT (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å 1 USDT = 95 RUB)
        usdt_amount = video['earnings'] / 95.0
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ 0.1 USDT
        if usdt_amount < 0.1:
            await callback.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ 0.1 USDT (‚âà9.5‚ÇΩ). –£ –≤–∞—Å: {usdt_amount:.4f} USDT", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Crypto Bot
        payout_result = await crypto_pay_manager.create_payout(
            user_id=callback.from_user.id,
            amount=usdt_amount
        )
        
        if payout_result['success']:
            # –û–±–Ω—É–ª—è–µ–º earnings –¥–ª—è –≤–∏–¥–µ–æ
            await db.update_video_earnings(video_id, 0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.add_to_withdrawn(callback.from_user.id, video['earnings'])
            
            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"{callback.message.text}\n\n"
                f"‚úÖ <b>–í—ã–ø–ª–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!</b>\n"
                f"üí∞ –°—É–º–º–∞: {video['earnings']:.2f} ‚ÇΩ ({usdt_amount:.4f} USDT)\n"
                f"üì± –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Crypto Bot (@CryptoBot)",
                parse_mode="HTML"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            from core.utils import send_to_admin_chat
            await send_to_admin_chat(
                callback.bot,
                f"üí∞ <b>–ê–≤—Ç–æ–≤—ã–ø–ª–∞—Ç–∞ GOLD</b>\n\n"
                f"üë§ {callback.from_user.full_name} (@{callback.from_user.username})\n"
                f"üÜî Video ID: <code>{video_id}</code>\n"
                f"üí∞ –°—É–º–º–∞: {video['earnings']:.2f} ‚ÇΩ ({usdt_amount:.4f} USDT)\n"
                f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ Crypto Bot"
            )
            
            await callback.answer("‚úÖ –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", show_alert=True)
        else:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–ª–∞—Ç—ã: {payout_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", show_alert=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤—ã–ø–ª–∞—Ç—ã: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}", show_alert=True)
