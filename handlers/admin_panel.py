"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
"""
import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.database import Database
from core import config
from core.keyboards import (
    admin_panel_keyboard,
    admin_time_filter_keyboard,
    admin_user_actions_keyboard,
    admin_media_keys_keyboard,
    cancel_keyboard
)

router = Router()
db = Database(config.DATABASE_PATH)
logger = logging.getLogger(__name__)


class MediaKeysStates(StatesGroup):
    waiting_for_upload = State()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
    return user_id in config.ADMIN_IDS


def get_date_range(period: str):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    now = datetime.now()
    
    if period == "today":
        start = datetime(now.year, now.month, now.day)
        end = now
    elif period == "yesterday":
        yesterday = now - timedelta(days=1)
        start = datetime(yesterday.year, yesterday.month, yesterday.day)
        end = datetime(yesterday.year, yesterday.month, yesterday.day, 23, 59, 59)
    elif period == "week":
        start = now - timedelta(days=7)
        end = now
    elif period == "month":
        start = now - timedelta(days=30)
        end = now
    else:  # all
        start = datetime(2020, 1, 1)
        end = now
    
    return start, end


@router.message(F.text == "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def show_admin_panel(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")
        return
    
    text = (
        "üë®‚Äçüíº <b>–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    
    await message.answer(text, reply_markup=admin_panel_keyboard(), parse_mode="HTML")


@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    text = (
        "üë®‚Äçüíº <b>–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    
    await callback.message.edit_text(text, reply_markup=admin_panel_keyboard(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "admin_analytics")
async def show_analytics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:</b>",
        reply_markup=admin_time_filter_keyboard("analytics"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("analytics_"))
async def show_analytics_period(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    period = callback.data.split("_")[1]
    start_date, end_date = get_date_range(period)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_admin_analytics(start_date, end_date)
    
    period_names = {
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "yesterday": "–í—á–µ—Ä–∞",
        "week": "–ó–∞ –Ω–µ–¥–µ–ª—é",
        "month": "–ó–∞ –º–µ—Å—è—Ü",
        "all": "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è"
    }
    
    text = (
        f"üìä <b>–û–ë–©–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê</b>\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_names.get(period, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        
        f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"  ‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}\n"
        f"  ‚Ä¢ –ù–æ–≤—ã—Ö: {stats['new_users']}\n"
        f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']}\n\n"
        
        f"üìπ <b>–í–∏–¥–µ–æ:</b>\n"
        f"  ‚Ä¢ –í—Å–µ–≥–æ: {stats['total_videos']}\n"
        f"  ‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved_videos']}\n"
        f"  ‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {stats['pending_videos']}\n"
        f"  ‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected_videos']}\n\n"
        
        f"üëÅ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b>\n"
        f"  ‚Ä¢ –í—Å–µ–≥–æ: {stats['total_views']:,}\n"
        f"  ‚Ä¢ TikTok: {stats['tiktok_views']:,}\n"
        f"  ‚Ä¢ YouTube: {stats['youtube_views']:,}\n\n"
        
        f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
        f"  ‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ: {stats['total_paid']:.2f} ‚ÇΩ\n"
        f"  ‚Ä¢ –í USDT: ~{stats['total_paid_usdt']:.4f}\n"
        f"  ‚Ä¢ –ù–∞ –±–∞–ª–∞–Ω—Å–∞—Ö: {stats['total_balance']:.2f} ‚ÇΩ\n"
        f"  ‚Ä¢ –†–µ—Ñ. –¥–æ—Ö–æ–¥: {stats['referral_earnings']:.2f} ‚ÇΩ\n\n"
        
        f"üéØ <b>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"  ‚Ä¢ –í–∏–¥–µ–æ –Ω–∞ —é–∑–µ—Ä–∞: {stats['avg_videos_per_user']:.1f}\n"
        f"  ‚Ä¢ –í—ã–ø–ª–∞—Ç–∞: {stats['avg_payout']:.2f} ‚ÇΩ\n"
        f"  ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –≤–∏–¥–µ–æ: {stats['avg_views_per_video']:,.0f}"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_time_filter_keyboard("analytics"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_top_users")
async def show_top_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üèÜ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:</b>",
        reply_markup=admin_time_filter_keyboard("top"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("top_"))
async def show_top_users_period(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ (—Ä–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    period = callback.data.split("_")[1]
    start_date, end_date = get_date_range(period)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    top_tiktokers = await db.get_top_users_by_platform('tiktok', start_date, end_date, limit=5)
    top_youtubers = await db.get_top_users_by_platform('youtube', start_date, end_date, limit=5)
    
    period_names = {
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "yesterday": "–í—á–µ—Ä–∞",
        "week": "–ó–∞ –Ω–µ–¥–µ–ª—é",
        "month": "–ó–∞ –º–µ—Å—è—Ü",
        "all": "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è"
    }
    
    text = (
        f"üèÜ <b>–¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_names.get(period, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
    )
    
    # –¢–æ–ø TikTokers
    text += "üéµ <b>–¢–û–ü TIKTOK:</b>\n\n"
    if not top_tiktokers:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
    else:
        for i, user in enumerate(top_tiktokers, 1):
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üèÖ"
            text += (
                f"{emoji} <b>#{i}</b> {user['full_name']}\n"
                f"  ‚Ä¢ @{user.get('tiktok_username', user.get('username', '–Ω–µ—Ç'))}\n"
                f"  ‚Ä¢ üëÅ {user['total_views']:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
                f"  ‚Ä¢ üí∞ {user['total_earnings']:.2f} ‚ÇΩ\n\n"
            )
    
    # –¢–æ–ø YouTubers
    text += "üì∫ <b>–¢–û–ü YOUTUBE:</b>\n\n"
    if not top_youtubers:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    else:
        for i, user in enumerate(top_youtubers, 1):
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üèÖ"
            text += (
                f"{emoji} <b>#{i}</b> {user['full_name']}\n"
                f"  ‚Ä¢ {user.get('youtube_channel', user.get('username', '–Ω–µ—Ç'))}\n"
                f"  ‚Ä¢ üëÅ {user['total_views']:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
                f"  ‚Ä¢ üí∞ {user['total_earnings']:.2f} ‚ÇΩ\n\n"
            )
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_time_filter_keyboard("top"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_media_keys")
async def show_media_keys_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return

    available = await db.count_available_media_keys()

    text = (
        "üîë <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ê–ú–ò</b>\n\n"
        f"üì¶ –î–æ—Å—Ç—É–ø–Ω–æ –∫–ª—é—á–µ–π: <b>{available}</b>\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –Ω–∞–±–æ—Ä—ã –∫–ª—é—á–µ–π (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ).\n"
        "‚Ä¢ –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–∞–∑ –≤ 7 –¥–Ω–µ–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤."
    )

    await callback.message.edit_text(
        text,
        reply_markup=admin_media_keys_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_media_keys_upload")
async def prompt_keys_upload(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –∞–¥–º–∏–Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∫–ª—é—á–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return

    await state.set_state(MediaKeysStates.waiting_for_upload)
    await callback.message.edit_text(
        "üì• <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .txt –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π —Ç–µ–∫—Å—Ç–æ–º, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É.",
        reply_markup=cancel_keyboard("admin_media_keys"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(MediaKeysStates.waiting_for_upload)
async def receive_media_keys(message: Message, state: FSMContext):
    """–ü—Ä–∏—ë–º –∫–ª—é—á–µ–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", parse_mode="HTML")
        return

    keys: list[str] = []

    if message.document:
        document = message.document
        if not document.file_name.endswith('.txt'):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ .txt", parse_mode="HTML"
            )
            return
        file = await message.bot.download(document)
        content = file.read().decode('utf-8')
        keys = content.splitlines()
    elif message.text:
        keys = message.text.splitlines()
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–ª—é—á–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ .txt —Ñ–∞–π–ª.",
            parse_mode="HTML"
        )
        return

    inserted = await db.add_media_keys(keys, uploaded_by=message.from_user.id)
    await state.clear()

    await message.answer(
        f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–π: <b>{inserted}</b>",
        reply_markup=admin_media_keys_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_media_keys_recent")
async def show_recent_keys(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–¥–∞—á–∏ –∫–ª—é—á–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return

    recent = await db.get_recently_assigned_media_keys(limit=10)

    if not recent:
        text = "‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π."
    else:
        lines = ["üìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–¥–∞—á–∏</b>:\n"]
        for item in recent:
            user_display = item.get('assigned_username') or item.get('assigned_to') or '‚Äî'
            assigned_at = item.get('assigned_at') or '‚Äî'
            lines.append(
                f"üîë <code>{item['key_value']}</code>\n"
                f"   üë§ {user_display}\n"
                f"   üìÖ {assigned_at}\n"
            )
        text = "\n".join(lines)

    await callback.message.edit_text(
        text,
        reply_markup=admin_media_keys_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_user_management")
async def show_user_management(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    text = (
        "üë• <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>123456789</code>"
    )
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("admin_ban_"))
async def ban_user(callback: CallbackQuery):
    """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[2])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å banned
    await db.ban_user(user_id)
    
    await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω!", show_alert=True)
    await callback.message.edit_text(
        f"üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω</b>\n\n"
        f"ID: {user_id}\n"
        f"–°—Ç–∞—Ç—É—Å: BANNED",
        reply_markup=admin_user_actions_keyboard(user_id),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("admin_unban_"))
async def unban_user(callback: CallbackQuery):
    """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[2])
    
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ç—É—Å banned
    await db.unban_user(user_id)
    
    await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω!", show_alert=True)
    await callback.message.edit_text(
        f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω</b>\n\n"
        f"ID: {user_id}\n"
        f"–°—Ç–∞—Ç—É—Å: ACTIVE",
        reply_markup=admin_user_actions_keyboard(user_id),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("admin_reset_balance_"))
async def reset_balance(callback: CallbackQuery):
    """–û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    user = await db.get_user(user_id)
    old_balance = user.get('balance', 0) if user else 0
    
    # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    await db.update_user_balance(user_id, 0, operation='set')
    
    await callback.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª–µ–Ω! –ë—ã–ª–æ: {old_balance:.2f} ‚ÇΩ", show_alert=True)
    await callback.message.edit_text(
        f"üí∏ <b>–ë–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª–µ–Ω</b>\n\n"
        f"ID: {user_id}\n"
        f"–ë—ã–ª–æ: {old_balance:.2f} ‚ÇΩ\n"
        f"–°—Ç–∞–ª–æ: 0.00 ‚ÇΩ",
        reply_markup=admin_user_actions_keyboard(user_id),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_tiktok_stats")
async def show_tiktok_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TikTok"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üéµ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:</b>",
        reply_markup=admin_time_filter_keyboard("tiktok"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("tiktok_"))
async def show_tiktok_stats_period(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TikTok –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    period = callback.data.split("_")[1]
    start_date, end_date = get_date_range(period)
    
    stats = await db.get_platform_stats('tiktok', start_date, end_date)
    top_tiktokers = await db.get_top_users_by_platform('tiktok', start_date, end_date, limit=5)
    
    period_names = {
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "yesterday": "–í—á–µ—Ä–∞",
        "week": "–ó–∞ –Ω–µ–¥–µ–ª—é",
        "month": "–ó–∞ –º–µ—Å—è—Ü",
        "all": "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è"
    }
    
    text = (
        f"üéµ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê TIKTOK</b>\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_names.get(period, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        
        f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"  ‚Ä¢ –í–∏–¥–µ–æ: {stats['total_videos']}\n"
        f"  ‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved_videos']}\n"
        f"  ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {stats['total_views']:,}\n"
        f"  ‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ: {stats['total_paid']:.2f} ‚ÇΩ\n\n"
        
        f"üèÜ <b>–¢–æ–ø TikTokers:</b>\n"
    )
    
    if top_tiktokers:
        for i, user in enumerate(top_tiktokers, 1):
            text += (
                f"  {i}. @{user.get('tiktok_username', '–Ω–µ—Ç')}\n"
                f"     üëÅ {user['total_views']:,} | üí∞ {user['total_earnings']:.2f} ‚ÇΩ\n"
            )
    else:
        text += "  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_time_filter_keyboard("tiktok"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_youtube_stats")
async def show_youtube_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É YouTube"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üì∫ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:</b>",
        reply_markup=admin_time_filter_keyboard("youtube"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("youtube_"))
async def show_youtube_stats_period(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É YouTube –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    period = callback.data.split("_")[1]
    start_date, end_date = get_date_range(period)
    
    stats = await db.get_platform_stats('youtube', start_date, end_date)
    top_youtubers = await db.get_top_users_by_platform('youtube', start_date, end_date, limit=5)
    
    period_names = {
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "yesterday": "–í—á–µ—Ä–∞",
        "week": "–ó–∞ –Ω–µ–¥–µ–ª—é",
        "month": "–ó–∞ –º–µ—Å—è—Ü",
        "all": "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è"
    }
    
    text = (
        f"üì∫ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê YOUTUBE</b>\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_names.get(period, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        
        f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"  ‚Ä¢ –í–∏–¥–µ–æ: {stats['total_videos']}\n"
        f"  ‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved_videos']}\n"
        f"  ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {stats['total_views']:,}\n"
        f"  ‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ: {stats['total_paid']:.2f} ‚ÇΩ\n\n"
        
        f"üèÜ <b>–¢–æ–ø YouTubers:</b>\n"
    )
    
    if top_youtubers:
        for i, user in enumerate(top_youtubers, 1):
            text += (
                f"  {i}. @{user.get('youtube_channel', '–Ω–µ—Ç')}\n"
                f"     üëÅ {user['total_views']:,} | üí∞ {user['total_earnings']:.2f} ‚ÇΩ\n"
            )
    else:
        text += "  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_time_filter_keyboard("youtube"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_finances")
async def show_finances(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:</b>",
        reply_markup=admin_time_filter_keyboard("finances"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("finances_"))
async def show_finances_period(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    period = callback.data.split("_")[1]
    start_date, end_date = get_date_range(period)
    
    finances = await db.get_finances_stats(start_date, end_date)
    
    period_names = {
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "yesterday": "–í—á–µ—Ä–∞",
        "week": "–ó–∞ –Ω–µ–¥–µ–ª—é",
        "month": "–ó–∞ –º–µ—Å—è—Ü",
        "all": "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è"
    }
    
    text = (
        f"üí∞ <b>–§–ò–ù–ê–ù–°–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_names.get(period, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        
        f"üí∏ <b>–í—ã–ø–ª–∞—Ç—ã:</b>\n"
        f"  ‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ: {finances['total_paid']:.2f} ‚ÇΩ\n"
        f"  ‚Ä¢ –í USDT: ~{finances['total_paid_usdt']:.4f}\n"
        f"  ‚Ä¢ –ö–æ–ª-–≤–æ –≤—ã–ø–ª–∞—Ç: {finances['payout_count']}\n\n"
        
        f"üíº <b>–ë–∞–ª–∞–Ω—Å—ã:</b>\n"
        f"  ‚Ä¢ –ù–∞ –±–∞–ª–∞–Ω—Å–∞—Ö —é–∑–µ—Ä–æ–≤: {finances['total_balance']:.2f} ‚ÇΩ\n"
        f"  ‚Ä¢ –†–µ—Ñ. –¥–æ—Ö–æ–¥: {finances['referral_earnings']:.2f} ‚ÇΩ\n\n"
        
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:</b>\n"
        f"  ‚Ä¢ TikTok: {finances['tiktok_paid']:.2f} ‚ÇΩ\n"
        f"  ‚Ä¢ YouTube: {finances['youtube_paid']:.2f} ‚ÇΩ\n\n"
        
        f"üéØ <b>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –≤—ã–ø–ª–∞—Ç–∞: {finances['avg_payout']:.2f} ‚ÇΩ\n"
        f"  ‚Ä¢ –ù–∞ —é–∑–µ—Ä–∞: {finances['avg_per_user']:.2f} ‚ÇΩ"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_time_filter_keyboard("finances"),
        parse_mode="HTML"
    )
    await callback.answer()
