"""–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∞–º–∏ –∏ —É—Ä–æ–≤–Ω—è–º–∏"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from core.database import Database
from core.config import ADMIN_IDS

from core.utils import send_to_admin_chat
import logging

logger = logging.getLogger(__name__)
router = Router()


class SetYouTubeRate(StatesGroup):
    waiting_for_rate = State()


class SetUserTier(StatesGroup):
    waiting_for_tier = State()


@router.message(Command("set_youtube_rate"))
async def cmd_set_youtube_rate(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É –¥–ª—è YouTube –∫–∞–Ω–∞–ª–∞: /set_youtube_rate user_id rate"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    args = message.text.split()
    if len(args) != 3:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π: /set_youtube_rate <user_id> <—Å—Ç–∞–≤–∫–∞>\n"
            "–ü—Ä–∏–º–µ—Ä: /set_youtube_rate 123456789 75"
        )
        return
    
    try:
        user_id = int(args[1])
        rate = float(args[2])
        
        if rate <= 0:
            await message.answer("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
        
        db = Database("bot_database.db")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è YouTube –∫–∞–Ω–∞–ª
        channel_info = await db.get_youtube_channel_info(user_id)
        if not channel_info:
            await message.answer(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ YouTube –∫–∞–Ω–∞–ª–∞!")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        success = await db.set_youtube_rate(user_id, rate)
        
        if success:
            await message.answer(
                f"‚úÖ –°—Ç–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"üë§ User ID: {user_id}\n"
                f"üì∫ –ö–∞–Ω–∞–ª: {channel_info['channel_name']}\n"
                f"üí∞ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {rate}‚ÇΩ –∑–∞ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
            )
            logger.info(f"–ê–¥–º–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å—Ç–∞–≤–∫—É {rate}‚ÇΩ/1K –¥–ª—è user_id={user_id}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞–≤–∫–∏!")
    
    except ValueError:
        await message.answer("‚ùå User ID –∏ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_youtube_rate: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("set_tier"))
async def cmd_set_tier(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /set_tier user_id bronze/gold"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    args = message.text.split()
    if len(args) != 3:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π: /set_tier <user_id> <bronze/gold>\n"
            "–ü—Ä–∏–º–µ—Ä: /set_tier 123456789 gold"
        )
        return
    
    try:
        user_id = int(args[1])
        tier = args[2].lower()
        
        if tier not in ['bronze', 'gold']:
            await message.answer("‚ùå –£—Ä–æ–≤–µ–Ω—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 'bronze' –∏–ª–∏ 'gold'!")
            return
        
        db = Database("bot_database.db")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await db.get_user(user_id)
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        success = await db.set_user_tier(user_id, tier)
        
        if success:
            tier_emoji = "ü•â" if tier == "bronze" else "ü•á"
            tier_desc = "—Å –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∞" if tier == "bronze" else "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è"
            
            await message.answer(
                f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
                f"üë§ User ID: {user_id}\n"
                f"{tier_emoji} –£—Ä–æ–≤–µ–Ω—å: {tier.upper()}\n"
                f"‚è± –í—ã–≤–æ–¥: {tier_desc}"
            )
            logger.info(f"–ê–¥–º–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–∏–ª —É—Ä–æ–≤–µ–Ω—å {tier} –¥–ª—è user_id={user_id}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É—Ä–æ–≤–Ω—è!")
    
    except ValueError:
        await message.answer("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_tier: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data.startswith("set_rate_"))
async def set_rate_for_video(callback: CallbackQuery, state: FSMContext):
    """–ö–Ω–æ–ø–∫–∞ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É' –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –ø–µ—Ä–≤–æ–º –≤–∏–¥–µ–æ"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    try:
        video_id = int(callback.data.split("_")[2])
        
        db = Database("bot_database.db")
        video = await db.get_video_with_details(video_id)
        
        if not video:
            await callback.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ FSM –≤–∫–ª—é—á–∞—è ID —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.set_state(SetYouTubeRate.waiting_for_rate)
        await state.update_data(
            video_id=video_id,
            user_id=video['user_id'],
            admin_message_id=callback.message.message_id
        )
        
        await callback.message.answer(
            f"üí∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–ª–∞—Ç—ã –∑–∞ YouTube –≤–∏–¥–µ–æ\n\n"
            f"üë§ User ID: {video['user_id']}\n"
            f"üì∫ –ö–∞–Ω–∞–ª: {video.get('video_author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {video.get('views', 0):,}\n\n"
            f"üíµ –û—Ç–ø—Ä–∞–≤—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –∑–∞ —ç—Ç–æ –≤–∏–¥–µ–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500)\n"
            f"‚ÑπÔ∏è –≠—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–ª–∞—Ç–∞ –∑–∞ –≤–∏–¥–µ–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
        )
        await callback.answer()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_rate_for_video: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.message(SetYouTubeRate.waiting_for_rate)
async def process_youtube_rate(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –∑–∞ –≤–∏–¥–µ–æ"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        amount = float(message.text)
        
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        data = await state.get_data()
        user_id = data['user_id']
        video_id = data['video_id']
        
        db = Database("bot_database.db")
        
        # –û–¥–æ–±—Ä—è–µ–º –≤–∏–¥–µ–æ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É
        await db.update_video_status(video_id, 'approved')
        await db.update_video_earnings(video_id, amount)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        video = await db.get_video_with_details(video_id)
        user = await db.get_user(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ
        state_data = await state.get_data()
        admin_message_id = state_data.get('admin_message_id')
        
        updated_admin_text = (
            f"‚úÖ <b>–í—ã–ø–ª–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –≤–∏–¥–µ–æ –æ–¥–æ–±—Ä–µ–Ω–æ!</b>\n\n"
            f"üí∞ <b>–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞:</b> {amount:.2f}‚ÇΩ\n\n"
            f"üìã <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
            f"‚Ä¢ –ò–º—è: {user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"‚Ä¢ Username: @{user.get('username', '–Ω–µ—Ç')}\n"
            f"‚Ä¢ User ID: <code>{user_id}</code>\n"
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {('ü•á GOLD (24—á –∑–∞–¥–µ—Ä–∂–∫–∞)' if user.get('tier') == 'gold' else 'ü•â BRONZE (24—á –∑–∞–¥–µ—Ä–∂–∫–∞)')}\n\n"
            f"üì∫ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> YouTube\n"
            f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {video.get('video_author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"üìä <b>–°—Ç–∞–≤–∫–∞:</b> {amount:.2f} ‚ÇΩ –∑–∞ 1–ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n\n"
            f"üìà <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ:</b>\n"
            f"‚Ä¢ ID: {video_id}\n"
            f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {video.get('video_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:30]}...\n"
            f"‚Ä¢ URL: {video.get('video_url', '–ù–µ—Ç URL')}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–¥–µ–æ:</b>\n"
            f"‚Ä¢ üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {video.get('views', 0):,}\n"
            f"‚Ä¢ ‚ù§Ô∏è –õ–∞–π–∫–∏: {video.get('likes', 0)}\n"
            f"‚Ä¢ üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {video.get('comments', 0)}\n\n"
            f"üí∏ <b>–†–∞—Å—á–µ—Ç –≤—ã–ø–ª–∞—Ç—ã:</b>\n"
            f"‚Ä¢ üíµ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –∑–∞ –≤–∏–¥–µ–æ\n"
            f"‚Ä¢ –°—É–º–º–∞: {amount:.2f} ‚ÇΩ\n"
            f"‚Ä¢ –í USDT: ~{amount / 82:.2f} USDT"
        )
        
        try:
            if admin_message_id:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                from core.utils import send_to_admin_chat
                await send_to_admin_chat(
                    message.bot,
                    updated_admin_text,
                    edit_message_id=admin_message_id
                )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.answer(updated_admin_text, parse_mode="HTML")
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.update_user_balance(user_id, amount, operation='add')
        
        # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã (10% –æ—Ç –≤—ã–ø–ª–∞—Ç—ã)
        if user and user.get('referrer_id'):
            referral_amount = amount * 0.10
            await db.add_referral_earning(
                referrer_id=user['referrer_id'],
                referred_id=user_id,
                amount=referral_amount
            )
            logger.info(f"Referral bonus {referral_amount:.2f} RUB credited to user {user['referrer_id']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        updated_user = await db.get_user(user_id)
        new_balance = updated_user.get('balance', 0)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.bot.send_message(
                user_id,
                f"‚úÖ <b>–¢–≤–æ–µ –≤–∏–¥–µ–æ –æ–¥–æ–±—Ä–µ–Ω–æ!</b>\n\n"
                f"üÜî ID –≤–∏–¥–µ–æ: <code>{video_id}</code>\n"
                f"üì∫ {video.get('video_title', '–í–∏–¥–µ–æ')}\n"
                f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {video.get('views', 0):,}\n\n"
                f"üíµ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {amount:.2f} ‚ÇΩ\n\n"
                f"üí∞ <b>–î–µ–Ω—å–≥–∏ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ!</b>\n"
                f"üíº –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} ‚ÇΩ\n\n"
                f"–í—ã–≤–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ \"üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\" (–º–∏–Ω–∏–º—É–º –æ—Ç 1$)",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
        logger.info(f"–ê–¥–º–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—ã–ø–ª–∞—Ç—É {amount}‚ÇΩ –¥–ª—è –≤–∏–¥–µ–æ {video_id} (user_id={user_id})")
        
        await state.clear()
    
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_youtube_rate: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await state.clear()


@router.message(Command("get_rate"))
async def cmd_get_rate(message: Message):
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /get_rate user_id"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    args = message.text.split()
    if len(args) != 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π: /get_rate <user_id>\n"
            "–ü—Ä–∏–º–µ—Ä: /get_rate 123456789"
        )
        return
    
    try:
        user_id = int(args[1])
        db = Database("bot_database.db")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º YouTube –∫–∞–Ω–∞–ª
        channel_info = await db.get_youtube_channel_info(user_id)
        if not channel_info:
            await message.answer(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ YouTube –∫–∞–Ω–∞–ª–∞!")
            return
        
        rate = await db.get_youtube_rate(user_id)
        
        await message.answer(
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–≤–∫–µ\n\n"
            f"üë§ User ID: {user_id}\n"
            f"üì∫ –ö–∞–Ω–∞–ª: {channel_info['channel_name']}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {rate}‚ÇΩ –∑–∞ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
        )
    
    except ValueError:
        await message.answer("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_rate: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("get_tier"))
async def cmd_get_tier(message: Message):
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /get_tier user_id"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    args = message.text.split()
    if len(args) != 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π: /get_tier <user_id>\n"
            "–ü—Ä–∏–º–µ—Ä: /get_tier 123456789"
        )
        return
    
    try:
        user_id = int(args[1])
        db = Database("bot_database.db")
        
        user = await db.get_user(user_id)
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        tier = await db.get_user_tier(user_id)
        tier_emoji = "ü•â" if tier == "bronze" else "ü•á"
        tier_desc = "—Å –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∞" if tier == "bronze" else "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è"
        
        await message.answer(
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ\n\n"
            f"üë§ User ID: {user_id}\n"
            f"üë§ –ò–º—è: {user['full_name']}\n"
            f"{tier_emoji} –£—Ä–æ–≤–µ–Ω—å: {tier.upper()}\n"
            f"‚è± –í—ã–≤–æ–¥: {tier_desc}"
        )
    
    except ValueError:
        await message.answer("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_tier: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
