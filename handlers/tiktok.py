from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiohttp
from bs4 import BeautifulSoup
import random
import string
import re
import logging
import asyncio

from core.database import Database
from core.keyboards import cancel_keyboard, tiktok_verification_keyboard
from core import config

logger = logging.getLogger(__name__)

router = Router()
db = Database(config.DATABASE_PATH)


def create_progress_bar(percent: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤–∏–∑—É–∞–ª—å–Ω–æ"""
    filled = int(percent / 10)
    empty = 10 - filled
    return f"{'üü©' * filled}{'‚¨ú' * empty} {percent}%"


async def update_progress_message(message: Message, title: str, steps: list, current_step: int, total_steps: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    percent = int((current_step / total_steps) * 100)
    progress_bar = create_progress_bar(percent)
    
    text = f"üîç <b>{title}</b>\n\n{progress_bar}\n\n"
    
    for i, step in enumerate(steps):
        if i < current_step:
            text += f"‚úÖ {step}\n"
        elif i == current_step:
            text += f"‚è≥ {step}\n"
        else:
            text += f"‚è∏Ô∏è {step}\n"
    
    try:
        await message.edit_text(text, parse_mode="HTML")
    except:
        pass


class TikTokStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_confirmation = State()


def generate_verification_code(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    return f"TG{user_id}{random_part}"


def extract_tiktok_username(url: str) -> str:
    """–ò–∑–≤–ª–µ—á—å username –∏–∑ TikTok URL"""
    # https://www.tiktok.com/@username
    # https://tiktok.com/@username
    # @username
    
    if url.startswith('@'):
        return url[1:]
    
    match = re.search(r'tiktok\.com/@([a-zA-Z0-9_.]+)', url)
    if match:
        return match.group(1)
    
    return None


async def get_tiktok_profile_bio(username: str) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –±–∏–æ –ø—Ä–æ—Ñ–∏–ª—è TikTok –∏—Å–ø–æ–ª—å–∑—É—è HTTP –∑–∞–ø—Ä–æ—Å (–±—ã—Å—Ç—Ä–æ) –∏–ª–∏ Playwright (—Ä–µ–∑–µ—Ä–≤)
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
    """
    url = f"https://www.tiktok.com/@{username}"
    logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –±–∏–æ –¥–ª—è @{username}")
    
    # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–±—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å (–±—ã—Å—Ç—Ä–æ)
    try:
        import aiohttp
        from bs4 import BeautifulSoup
        import json
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        }
        
        logger.info(f"üì° HTTP –∑–∞–ø—Ä–æ—Å –∫ {url}")
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, timeout=aiohttp.ClientTimeout(total=15)) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    logger.info(f"‚úÖ HTML –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ script —Ç–µ–≥–∞—Ö —Å SIGI_STATE
                    for script in soup.find_all('script', {'id': 'SIGI_STATE'}):
                        script_text = script.string or ''
                        logger.info(f"üîé –ù–∞–π–¥–µ–Ω SIGI_STATE script, —Ä–∞–∑–º–µ—Ä: {len(script_text)}")
                        try:
                            data = json.loads(script_text)
                            logger.info(f"üì¶ JSON —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, –∫–ª—é—á–∏: {list(data.keys())}")
                            
                            # –ò—â–µ–º UserModule
                            if 'UserModule' in data:
                                user_module = data['UserModule']
                                logger.info(f"üë§ UserModule –Ω–∞–π–¥–µ–Ω, –∫–ª—é—á–∏: {list(user_module.keys())}")
                                
                                # –ò—â–µ–º users
                                if 'users' in user_module:
                                    for user_id, user_data in user_module['users'].items():
                                        logger.info(f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∫–ª—é—á–∏: {list(user_data.keys())}")
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å –±–∏–æ
                                        bio_fields = ['signature', 'desc', 'bioLink', 'bio']
                                        for field in bio_fields:
                                            if field in user_data and user_data[field]:
                                                bio = user_data[field]
                                                logger.info(f"‚úÖ Bio –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ–ª–µ '{field}': {bio}")
                                                return bio
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SIGI_STATE: {e}")
                    
                    # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ã—á–Ω—ã—Ö script —Ç–µ–≥–∞—Ö
                    for script in soup.find_all('script'):
                        script_text = script.string or ''
                        if 'signature' in script_text or 'bioLink' in script_text:
                            logger.info(f"üîé –ù–∞–π–¥–µ–Ω script —Å 'signature', —Ä–∞–∑–º–µ—Ä: {len(script_text)}")
                            try:
                                # –ò—â–µ–º –≤—Å–µ JSON –æ–±—ä–µ–∫—Ç—ã –≤ script
                                json_matches = re.findall(r'\{[^{}]*"signature"[^{}]*\}', script_text)
                                for json_str in json_matches:
                                    try:
                                        data = json.loads(json_str)
                                        bio = data.get('signature', '')
                                        if bio:
                                            logger.info(f"‚úÖ Bio –Ω–∞–π–¥–µ–Ω–æ –≤ script: {bio[:50]}")
                                            return bio
                                    except:
                                        continue
                            except Exception as e:
                                logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å script: {e}")
                    
                    # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ meta —Ç–µ–≥–∞—Ö
                    meta_desc = soup.find('meta', {'name': 'description'})
                    if meta_desc and meta_desc.get('content'):
                        content = meta_desc.get('content', '')
                        logger.info(f"üìù Meta description –Ω–∞–π–¥–µ–Ω: {content[:100]}")
                        # –í description —á–∞—Å—Ç–æ –µ—Å—Ç—å –±–∏–æ –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if content and len(content) > 10:
                            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º meta description –∫–∞–∫ bio")
                            return content
                    
                    logger.warning(f"‚ö†Ô∏è Bio –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ HTTP –º–µ—Ç–æ–¥–µ")
        
    except Exception as e:
        logger.error(f"‚ùå HTTP –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}")
    
    # –ú–µ—Ç–æ–¥ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º Playwright (–º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –Ω–∞–¥–µ–∂–Ω–µ–µ)
    logger.info("üé≠ –ü—Ä–æ–±—É–µ–º Playwright –º–µ—Ç–æ–¥")
    try:
        from playwright.async_api import async_playwright
        import asyncio
        
        async with async_playwright() as p:
            # –ó–∞–ø—É—Å–∫–∞–µ–º headless –±—Ä–∞—É–∑–µ—Ä
            logger.info("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä Chromium")
            browser = await p.chromium.launch(
                headless=True,
                args=[
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-blink-features=AutomationControlled',
                    '--disable-dev-shm-usage',
                    '--disable-web-security'
                ]
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            context = await browser.new_context(
                viewport={'width': 1920, 'height': 1080},
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                locale='ru-RU',
                timezone_id='Europe/Moscow',
                extra_http_headers={
                    'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                }
            )
            
            page = await context.new_page()
            
            try:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
                logger.info(f"üîó –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url}")
                try:
                    await page.goto(url, timeout=60000, wait_until='domcontentloaded')
                    logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (domcontentloaded)")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è domcontentloaded failed, trying load: {e}")
                    await page.goto(url, timeout=60000, wait_until='load')
                    logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (load)")
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                await page.wait_for_timeout(2000)
                
                # –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                bio_selectors = [
                    'h2[data-e2e="user-bio"]',
                    'h2.tiktok-bio',
                    '[data-e2e="user-subtitle"]',
                    'div.tiktok-1i0ztfr-DivInfoContainer h2',
                    'h2.tiktok-j2a19r-H2ShareDesc',
                ]
                
                bio_text = ""
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(bio_selectors)} —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤")
                for selector in bio_selectors:
                    try:
                        element = await page.query_selector(selector)
                        if element:
                            bio_text = await element.inner_text()
                            if bio_text:
                                logger.info(f"‚úÖ Bio –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä '{selector}': {bio_text[:50]}")
                                break
                    except Exception as e:
                        logger.debug(f"‚ö†Ô∏è –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                
                # –ú–µ—Ç–æ–¥ 2: –ò—â–µ–º –≤ JSON-LD –¥–∞–Ω–Ω—ã—Ö
                if not bio_text:
                    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON-LD")
                    try:
                        json_ld = await page.query_selector('script[type="application/ld+json"]')
                        if json_ld:
                            import json
                            content = await json_ld.inner_text()
                            data = json.loads(content)
                            bio_text = data.get('description', '')
                            if bio_text:
                                logger.info(f"‚úÖ Bio –Ω–∞–π–¥–µ–Ω–æ –≤ JSON-LD: {bio_text[:50]}")
                    except Exception as e:
                        logger.debug(f"‚ö†Ô∏è JSON-LD –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                
                # –ú–µ—Ç–æ–¥ 3: –ü–∞—Ä—Å–∏–º –≤–µ—Å—å HTML
                if not bio_text:
                    logger.info("üîç –ü–∞—Ä—Å–∏–º –≤–µ—Å—å HTML")
                    try:
                        html_content = await page.content()
                        soup = BeautifulSoup(html_content, 'html.parser')
                        
                        # –ò—â–µ–º –≤—Å–µ h2 —Ç–µ–≥–∏
                        h2_tags = soup.find_all('h2')
                        logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(h2_tags)} h2 —Ç–µ–≥–æ–≤")
                        for i, h2 in enumerate(h2_tags):
                            text = h2.get_text(strip=True)
                            logger.debug(f"  h2[{i}]: {text[:50] if text else 'empty'}")
                            if text and len(text) > 10 and len(text) < 500:
                                bio_text = text
                                logger.info(f"‚úÖ Bio –Ω–∞–π–¥–µ–Ω–æ –≤ h2[{i}]: {bio_text[:50]}")
                                break
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
                
                await browser.close()
                
                if bio_text:
                    logger.info(f"‚úÖ [Playwright] @{username} bio: {bio_text[:100]}")
                else:
                    logger.warning(f"‚ùå [Playwright] @{username} bio: NOT FOUND")
                
                return bio_text
                
            except Exception as e:
                await browser.close()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                return ""
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Playwright –º–µ—Ç–æ–¥–∞: {e}")
        return ""


@router.callback_query(F.data == "add_tiktok")
async def start_tiktok_verification(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ TikTok –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ TikTok
    existing_tiktok = await db.get_user_tiktok(callback.from_user.id)
    if existing_tiktok:
        verified_status = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if existing_tiktok['is_verified'] else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
        await callback.message.edit_text(
            f"‚ÑπÔ∏è <b>–£ –≤–∞—Å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω TikTok –∞–∫–∫–∞—É–Ω—Ç</b>\n\n"
            f"üéµ Username: <code>@{existing_tiktok['username']}</code>\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {verified_status}\n\n"
            f"‚ö†Ô∏è <b>–û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = –æ–¥–∏–Ω TikTok –∞–∫–∫–∞—É–Ω—Ç</b>\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å TikTok –∞–∫–∫–∞—É–Ω—Ç", show_alert=True)
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    verification_code = generate_verification_code(callback.from_user.id)
    await state.update_data(verification_code=verification_code)
    
    await callback.message.edit_text(
        f"üéµ <b>–ü—Ä–∏–≤—è–∑–∫–∞ TikTok –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à TikTok –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>https://www.tiktok.com/@username</code>\n"
        f"–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ: <code>@username</code>\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –û–¥–∏–Ω TikTok –º–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!",
        reply_markup=cancel_keyboard(),
        parse_mode="HTML"
    )
    
    await state.set_state(TikTokStates.waiting_for_url)
    await callback.answer()


@router.message(TikTokStates.waiting_for_url)
async def receive_tiktok_url(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å TikTok URL –∏ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"""
    
    url = message.text.strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username
    username = extract_tiktok_username(url)
    
    if not username:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ <code>https://www.tiktok.com/@username</code>\n"
            "‚Ä¢ <code>@username</code>",
            reply_markup=cancel_keyboard(),
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —ç—Ç–æ—Ç TikTok –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    existing = await db.get_tiktok_by_username(username)
    if existing:
        await message.answer(
            f"‚ùå <b>–≠—Ç–æ—Ç TikTok –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n"
            f"üéµ TikTok: <code>@{username}</code>\n"
            f"üë§ –ü—Ä–∏–≤—è–∑–∞–Ω –∫: {existing['full_name']}\n"
            f"üÜî ID: <code>{existing['user_id']}</code>\n\n"
            f"‚ö†Ô∏è <b>–û–¥–∏–Ω TikTok = –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–≤—Å–µ–≥–¥–∞</b>\n\n"
            f"–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    data = await state.get_data()
    verification_code = data['verification_code']
    
    await state.update_data(username=username, url=url)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    tiktok_url = f"https://www.tiktok.com/@{username}"
    
    await message.answer(
        f"‚úÖ <b>TikTok –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω!</b>\n\n"
        f"üë§ Username: <code>@{username}</code>\n"
        f"üîó –ü—Ä–æ—Ñ–∏–ª—å: {tiktok_url}\n\n"
        f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ!</b> –≠—Ç–æ—Ç TikTok –±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –≤–∞–º–∏ –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
        f"<b>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>\n"
        f"1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ <code>{verification_code}</code> –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è TikTok\n"
        f"2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"‚úÖ –ü–æ–º–µ–Ω—è–ª –æ–ø–∏—Å–∞–Ω–∏–µ\"</b> –Ω–∏–∂–µ\n\n"
        f"<b>–ò–õ–ò</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å –≤–∏–¥–∏–º—ã–º –∫–æ–¥–æ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏",
        reply_markup=tiktok_verification_keyboard(),
        parse_mode="HTML"
    )
    
    await state.set_state(TikTokStates.waiting_for_confirmation)


@router.message(TikTokStates.waiting_for_confirmation, F.photo)
async def receive_screenshot(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è"""
    
    data = await state.get_data()
    username = data['username']
    verification_code = data['verification_code']
    url = data['url']
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
    # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OCR (Tesseract)
    
    await message.answer(
        f"üì∏ <b>–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
        f"‚è≥ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n\n"
        f"üë§ TikTok: <code>@{username}</code>\n"
        f"üîë –ö–æ–¥: <code>{verification_code}</code>",
        parse_mode="HTML"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
    if config.ADMIN_CHAT_ID:
        try:
            await message.bot.send_photo(
                config.ADMIN_CHAT_ID,
                photo=message.photo[-1].file_id,
                caption=(
                    f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é TikTok</b>\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
                    f"üÜî ID: <code>{message.from_user.id}</code>\n"
                    f"üì± Username: @{message.from_user.username or '–Ω–µ—Ç'}\n\n"
                    f"üéµ TikTok: <code>@{username}</code>\n"
                    f"üîó –ü—Ä–æ—Ñ–∏–ª—å: {url}\n"
                    f"üîë –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: <code>{verification_code}</code>\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–¥ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∏–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ.\n\n"
                    f"–î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è: /approve_tiktok_{message.from_user.id}\n"
                    f"–î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: /reject_tiktok_{message.from_user.id}"
                ),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")
    else:
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω-—á–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in config.ADMIN_IDS:
            try:
                await message.bot.send_photo(
                    admin_id,
                    photo=message.photo[-1].file_id,
                    caption=(
                        f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é TikTok</b>\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
                        f"üÜî ID: <code>{message.from_user.id}</code>\n"
                        f"üì± Username: @{message.from_user.username or '–Ω–µ—Ç'}\n\n"
                        f"üéµ TikTok: <code>@{username}</code>\n"
                        f"üîó –ü—Ä–æ—Ñ–∏–ª—å: {url}\n"
                        f"üîë –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: <code>{verification_code}</code>\n\n"
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–¥ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∏–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ.\n\n"
                        f"–î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è: /approve_tiktok_{message.from_user.id}\n"
                        f"–î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: /reject_tiktok_{message.from_user.id}"
                    ),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
    
    await state.clear()


@router.callback_query(F.data == "tiktok_confirm_bio", TikTokStates.waiting_for_confirmation)
async def confirm_bio_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–µ–Ω—è–ª –æ–ø–∏—Å–∞–Ω–∏–µ'"""
    await callback.answer()
    
    data = await state.get_data()
    username = data['username']
    verification_code = data['verification_code']
    url = data['url']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
    steps = [
        "–û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ (20 —Å–µ–∫)",
        "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è",
        "–ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    ]
    
    await callback.message.edit_text(
        "üîç <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...</b>\n\n"
        "‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú 0%\n\n"
        "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ (20 —Å–µ–∫)\n"
        "‚è∏Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "‚è∏Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è\n"
        "‚è∏Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        parse_mode="HTML"
    )
    
    try:
        # –®–∞–≥ 1: –û–∂–∏–¥–∞–Ω–∏–µ –∫–µ—à–∞ TikTok (20 —Å–µ–∫—É–Ω–¥ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π)
        for i in range(20):
            percent = int(((i + 1) / 20) * 40)  # 0-40% –Ω–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥
            progress_bar = create_progress_bar(percent)
            text = (
                f"üîç <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...</b>\n\n"
                f"{progress_bar}\n\n"
                f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ ({20 - i} —Å–µ–∫)\n"
                f"‚è∏Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n"
                f"‚è∏Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è\n"
                f"‚è∏Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            )
            try:
                await callback.message.edit_text(text, parse_mode="HTML")
            except:
                pass
            await asyncio.sleep(1)
        
        # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è (–∞–Ω–∏–º–∞—Ü–∏—è 2 —Å–µ–∫—É–Ω–¥—ã)
        for i in range(4):
            percent = 40 + int(((i + 1) / 4) * 20)  # 40-60%
            progress_bar = create_progress_bar(percent)
            text = (
                f"üîç <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...</b>\n\n"
                f"{progress_bar}\n\n"
                f"‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ (20 —Å–µ–∫)\n"
                f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...\n"
                f"‚è∏Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è\n"
                f"‚è∏Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            )
            try:
                await callback.message.edit_text(text, parse_mode="HTML")
            except:
                pass
            await asyncio.sleep(0.5)
        
        # –®–∞–≥ 3: –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è (–≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)
        percent = 60
        progress_bar = create_progress_bar(percent)
        text = (
            f"üîç <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...</b>\n\n"
            f"{progress_bar}\n\n"
            f"‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ (20 —Å–µ–∫)\n"
            f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n"
            f"‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è...\n"
            f"‚è∏Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        )
        try:
            await callback.message.edit_text(text, parse_mode="HTML")
        except:
            pass
        
        bio = await get_tiktok_profile_bio(username)
        
        # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (–∞–Ω–∏–º–∞—Ü–∏—è 2 —Å–µ–∫—É–Ω–¥—ã)
        for i in range(4):
            percent = 60 + int(((i + 1) / 4) * 40)  # 60-100%
            progress_bar = create_progress_bar(percent)
            text = (
                f"üîç <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...</b>\n\n"
                f"{progress_bar}\n\n"
                f"‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ (20 —Å–µ–∫)\n"
                f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n"
                f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è\n"
                f"‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏..."
            )
            try:
                await callback.message.edit_text(text, parse_mode="HTML")
            except:
                pass
            await asyncio.sleep(0.5)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–æ
        if bio and verification_code in bio:
            # ‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
            tiktok_url = f"https://www.tiktok.com/@{username}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö TikTok –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            result = await db.add_tiktok_account(
                callback.from_user.id, 
                username,
                tiktok_url,
                verification_code
            )
            
            if result['success']:
                # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
                await db.verify_tiktok_account(callback.from_user.id)
                
                await callback.message.edit_text(
                    f"‚úÖ <b>TikTok –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                    f"üéµ <code>@{username}</code>\n"
                    f"üîë –ö–æ–¥ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
                    f"üîí <b>–ê–∫–∫–∞—É–Ω—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –≤–∞–º–∏ –Ω–∞–≤—Å–µ–≥–¥–∞</b>\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                    f"‚Ä¢ –£–¥–∞–ª–∏—Ç—å –∫–æ–¥ –∏–∑ –±–∏–æ –ø—Ä–æ—Ñ–∏–ª—è\n"
                    f"‚Ä¢ –ü–æ–¥–∞–≤–∞—Ç—å —Ä–æ–ª–∏–∫–∏ —Å —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
                    f"üìã –ù–∞–π–¥–µ–Ω–Ω–æ–µ –±–∏–æ:\n<i>{bio[:150]}...</i>",
                    parse_mode="HTML"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                from core.utils import send_to_admin_chat
                await send_to_admin_chat(
                    callback.bot,
                    f"‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è TikTok</b>\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name} (@{callback.from_user.username})\n"
                    f"üÜî ID: <code>{callback.from_user.id}</code>\n"
                    f"üéµ TikTok: <code>@{username}</code>\n"
                    f"üîë –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                )
            elif result['error'] == 'tiktok_taken':
                await callback.message.edit_text(
                    f"‚ùå <b>–≠—Ç–æ—Ç TikTok —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n"
                    f"üéµ TikTok: <code>@{username}</code>\n"
                    f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {result['owner_username']}\n"
                    f"üÜî ID: <code>{result['owner_id']}</code>\n\n"
                    f"–û–¥–∏–Ω TikTok = –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–≤—Å–µ–≥–¥–∞.",
                    parse_mode="HTML"
                )
            elif result['error'] == 'user_has_tiktok':
                await callback.message.edit_text(
                    f"‚ùå <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å TikTok –∞–∫–∫–∞—É–Ω—Ç!</b>\n\n"
                    f"üéµ –ü—Ä–∏–≤—è–∑–∞–Ω: <code>@{result['current_username']}</code>\n\n"
                    f"–û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = –æ–¥–∏–Ω TikTok –Ω–∞–≤—Å–µ–≥–¥–∞.",
                    parse_mode="HTML"
                )
            
            await state.clear()
            
        else:
            # ‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
            await callback.message.edit_text(
                f"‚ùå <b>–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è!</b>\n\n"
                f"üìã –ù–∞–π–¥–µ–Ω–Ω–æ–µ –±–∏–æ:\n<i>{bio[:200] if len(bio) > 0 else '–ü—É—Å—Ç–æ'}</i>\n\n"
                f"<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
                f"1Ô∏è‚É£ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∏–æ\n"
                f"2Ô∏è‚É£ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã (–∫–µ—à TikTok)\n"
                f"3Ô∏è‚É£ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –Ω–∞–∂–º–∏—Ç–µ <b>‚úÖ –ü–æ–º–µ–Ω—è–ª –æ–ø–∏—Å–∞–Ω–∏–µ</b>\n\n"
                f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
                parse_mode="HTML",
                reply_markup=tiktok_verification_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error during TikTok verification: {e}")
        try:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ</b>\n\n"
                f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
                parse_mode="HTML"
            )
        except:
            await callback.message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ</b>\n\n"
                f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
                parse_mode="HTML"
            )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        from core.utils import send_to_admin_chat
        await send_to_admin_chat(
            callback.bot,
            f"üîî <b>–ó–∞—è–≤–∫–∞ TikTok (–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞)</b>\n\n"
            f"üë§ {callback.from_user.full_name} (@{callback.from_user.username})\n"
            f"üéµ <code>@{username}</code>\n"
            f"üîë <code>{verification_code}</code>\n\n"
            f"/approve_tiktok_{callback.from_user.id}_{username}\n"
            f"/reject_tiktok_{callback.from_user.id}"
        )
        
        await state.clear()


@router.message(TikTokStates.waiting_for_confirmation, F.text)
async def confirm_manually(message: Message, state: FSMContext):
    """–†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏)"""
    
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"‚úÖ –ü–æ–º–µ–Ω—è–ª –æ–ø–∏—Å–∞–Ω–∏–µ\"</b> –≤—ã—à–µ\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å –≤–∏–¥–∏–º—ã–º –∫–æ–¥–æ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.",
        reply_markup=tiktok_verification_keyboard(),
        parse_mode="HTML"
    )


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(F.text.startswith("/approve_tiktok_"))
async def admin_approve_tiktok(message: Message):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä—è–µ—Ç TikTok –∞–∫–∫–∞—É–Ω—Ç"""
    if message.from_user.id not in config.ADMIN_IDS:
        return
    
    try:
        parts = message.text.split("_")
        user_id = int(parts[2])
        username = parts[3] if len(parts) > 3 else "unknown"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        user_tiktok = await db.get_user_tiktok(user_id)
        if user_tiktok:
            # –ü—Ä–æ—Å—Ç–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            await db.verify_tiktok_account(user_id)
            await message.answer(
                f"‚úÖ TikTok –∞–∫–∫–∞—É–Ω—Ç @{user_tiktok['username']} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
                parse_mode="HTML"
            )
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç (–¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ –∫–æ–¥–∞)
            tiktok_url = f"https://www.tiktok.com/@{username}"
            verification_code = generate_verification_code(user_id)
            
            result = await db.add_tiktok_account(user_id, username, tiktok_url, verification_code)
            
            if result['success']:
                # –°—Ä–∞–∑—É –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
                await db.verify_tiktok_account(user_id)
                await message.answer(
                    f"‚úÖ TikTok –∞–∫–∫–∞—É–Ω—Ç @{username} –æ–¥–æ–±—Ä–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
                    parse_mode="HTML"
                )
            elif result['error'] == 'tiktok_taken':
                await message.answer(
                    f"‚ùå TikTok @{username} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {result['owner_id']} ({result['owner_username']})",
                    parse_mode="HTML"
                )
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.bot.send_message(
                user_id,
                f"‚úÖ <b>–í–∞—à TikTok –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                f"üéµ <code>@{username}</code>\n\n"
                f"üîí –ê–∫–∫–∞—É–Ω—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –≤–∞–º–∏ –Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å —Ä–æ–ª–∏–∫–∏ —Å —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!",
                parse_mode="HTML"
            )
        except:
            pass
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(F.text.startswith("/reject_tiktok_"))
async def admin_reject_tiktok(message: Message):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç TikTok –∞–∫–∫–∞—É–Ω—Ç"""
    if message.from_user.id not in config.ADMIN_IDS:
        return
    
    try:
        parts = message.text.split("_")
        user_id = int(parts[2])
        
        await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.bot.send_message(
                user_id,
                f"‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é TikTok –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                f"–ü—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n"
                f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML"
            )
        except:
            pass
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

