from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import hashlib
import secrets
from datetime import datetime

from core.database import Database
from core.keyboards import cancel_keyboard, tiktok_verification_keyboard
from parsers.youtube_parser import (
    validate_youtube_url, 
    parse_youtube_channel,
    normalize_youtube_url
)
from core import config

router = Router()
db = Database(config.DATABASE_PATH)


class YouTubeStates(StatesGroup):
    waiting_for_url = State()


def generate_verification_code(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è YouTube (—É–Ω–∏–∫–∞–ª–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    timestamp = datetime.now().isoformat()
    random_salt = secrets.token_hex(8)  # 16 —Å–∏–º–≤–æ–ª–æ–≤ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
    
    seed = f"youtube_{user_id}_{timestamp}_{config.BOT_TOKEN}_{random_salt}"
    hash_obj = hashlib.sha256(seed.encode())
    code = hash_obj.hexdigest()[:16].upper()  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤
    
    return f"YT-{code}"


def create_progress_bar(percent: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤–∏–∑—É–∞–ª—å–Ω–æ"""
    filled = int(percent / 10)
    empty = 10 - filled
    return f"{'üü©' * filled}{'‚¨ú' * empty} {percent}%"


@router.callback_query(F.data == "add_youtube")
async def start_youtube_verification(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≤—è–∑–∫–∏ YouTube –∫–∞–Ω–∞–ª–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ YouTube
    youtube = await db.get_user_youtube(callback.from_user.id)
    if youtube:
        verified_status = "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if youtube['is_verified'] else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        await callback.answer(
            f"–£ –≤–∞—Å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω YouTube –∫–∞–Ω–∞–ª: {youtube['channel_name']}\n{verified_status}",
            show_alert=True
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    verification_code = generate_verification_code(callback.from_user.id)
    await state.update_data(verification_code=verification_code)
    
    await callback.message.edit_text(
        f"üì∫ <b>–ü—Ä–∏–≤—è–∑–∫–∞ YouTube –∫–∞–Ω–∞–ª–∞</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à YouTube –∫–∞–Ω–∞–ª:\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>https://www.youtube.com/@channelname</code>\n"
        f"–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ: <code>@channelname</code>\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –û–¥–∏–Ω YouTube –∫–∞–Ω–∞–ª –º–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!",
        reply_markup=cancel_keyboard(),
        parse_mode="HTML"
    )
    
    await state.set_state(YouTubeStates.waiting_for_url)
    await callback.answer()


@router.message(YouTubeStates.waiting_for_url)
async def receive_youtube_url(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∫–∞–Ω–∞–ª - –°–†–ê–ó–£ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥"""
    url = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not validate_youtube_url(url):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n"
            "‚Ä¢ <code>https://www.youtube.com/@channelname</code>\n"
            "‚Ä¢ <code>@channelname</code>\n"
            "‚Ä¢ <code>https://www.youtube.com/channel/UC...</code>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=cancel_keyboard(),
            parse_mode="HTML"
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL
    normalized_url = normalize_youtube_url(url) if not url.startswith('http') else url
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    data = await state.get_data()
    verification_code = data.get('verification_code')
    
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞!)
    await message.answer(
        f"üì∫ <b>YouTube –∫–∞–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
        f"üìã <b>–í–∞—à –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b>\n"
        f"<code>{verification_code}</code>\n\n"
        f"<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
        f"1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ YouTube Studio\n"
        f"2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ö–∞–Ω–∞–ª ‚Üí –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        f"3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n"
        f"4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
        f"5Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–°–º–µ–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ\"\n\n"
        f"‚è∞ <b>–í–∞–∂–Ω–æ:</b> –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–æ–∂–¥–∏—Ç–µ 20-30 —Å–µ–∫—É–Ω–¥",
        reply_markup=tiktok_verification_keyboard(),
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    await state.update_data(youtube_url=normalized_url)


@router.callback_query(F.data == "tiktok_confirm_bio", YouTubeStates.waiting_for_url)
async def youtube_check_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è YouTube –∫–∞–Ω–∞–ª–∞ –ü–û–°–õ–ï –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (—Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º)"""
    data = await state.get_data()
    verification_code = data.get('verification_code')
    youtube_url = data.get('youtube_url')
    
    if not youtube_url or not verification_code:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        await state.clear()
        return
    
    progress_msg = callback.message
    
    try:
        # –ê–Ω–∏–º–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è (20 —Å–µ–∫—É–Ω–¥)
        for i in range(1, 21):
            percent = int((i / 20) * 50)
            await progress_msg.edit_text(
                f"üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞</b>\n\n"
                f"{create_progress_bar(percent)}\n\n"
                f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è... ({i}/20 —Å–µ–∫)",
                parse_mode="HTML"
            )
            await asyncio.sleep(1)
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª
        await progress_msg.edit_text(
            f"üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞</b>\n\n"
            f"{create_progress_bar(60)}\n\n"
            f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞...",
            parse_mode="HTML"
        )
        
        try:
            channel_data = await parse_youtube_channel(youtube_url)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YouTube –∫–∞–Ω–∞–ª–∞: {e}")
            await progress_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞.\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ YouTube –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                f"‚Ä¢ –ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ —É–¥–∞–ª–µ–Ω\n"
                f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É:",
                reply_markup=tiktok_verification_keyboard(),
                parse_mode="HTML"
            )
            return
        
        if not channel_data:
            await progress_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞.\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª\n"
                f"‚Ä¢ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π\n"
                f"‚Ä¢ –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (>60 —Å–µ–∫)\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É:",
                reply_markup=tiktok_verification_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        await progress_msg.edit_text(
            f"üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞</b>\n\n"
            f"{create_progress_bar(80)}\n\n"
            f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è...",
            parse_mode="HTML"
        )
        
        description = channel_data.get('description', '')
        
        if verification_code not in description:
            await progress_msg.edit_text(
                f"‚ùå <b>–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"üìã –í–∞—à –∫–æ–¥: <code>{verification_code}</code>\n\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                f"‚Ä¢ –ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n"
                f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ YouTube Studio\n"
                f"‚Ä¢ –ü—Ä–æ—à–ª–æ 20-30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=tiktok_verification_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –ö–æ–¥ –Ω–∞–π–¥–µ–Ω! –°–æ—Ö—Ä–∞–Ω—è–µ–º
        await progress_msg.edit_text(
            f"üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞</b>\n\n"
            f"{create_progress_bar(100)}\n\n"
            f"‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω! –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...",
            parse_mode="HTML"
        )
        
        result = await db.add_youtube_channel(
            user_id=callback.from_user.id,
            channel_id=channel_data.get('channel_id', 'UNKNOWN'),
            channel_handle=channel_data.get('channel_handle', ''),
            channel_name=channel_data.get('channel_name', 'YouTube Channel'),
            url=youtube_url,
            verification_code=verification_code
        )
        
        if not result['success']:
            error_messages = {
                'channel_already_bound': "‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!",
                'user_already_has_youtube': "‚ùå –£ –≤–∞—Å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω YouTube –∫–∞–Ω–∞–ª!",
                'database_error': "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
            }
            
            error_text = error_messages.get(result['error'], "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await progress_msg.edit_text(error_text, parse_mode="HTML")
            await state.clear()
            return
        
        # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
        await db.verify_youtube_channel(callback.from_user.id)
        
        # –£—Å–ø–µ—Ö!
        subscriber_text = channel_data.get('subscriber_text', 'N/A')
        await progress_msg.edit_text(
            f"‚úÖ <b>YouTube –∫–∞–Ω–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n"
            f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_data.get('channel_name')}\n"
            f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {subscriber_text}\n"
            f"üÜî <b>ID:</b> <code>{channel_data.get('channel_id', 'N/A')}</code>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–∏–¥–µ–æ!",
            parse_mode="HTML"
        )
        
        await state.clear()
        
    except Exception as e:
        await progress_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        await state.clear()
    
    await callback.answer()
