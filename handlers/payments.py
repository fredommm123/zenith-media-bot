from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from core.database import Database
from core.utils import format_currency, send_to_admin_chat
from core.crypto_pay import calculate_usdt_amount, send_payment, get_exchange_rate_rub_to_usdt
from core import config
import logging

router = Router()
db = Database(config.DATABASE_PATH)
logger = logging.getLogger(__name__)


@router.message(F.text == "üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
async def show_withdrawal_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞"""
    user = await db.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", parse_mode="HTML")
        return
    
    balance = user['balance']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (CryptoBot —Ç—Ä–µ–±—É–µ—Ç >=0.1 USDT)
    usdt_amount = await calculate_usdt_amount(balance)
    if usdt_amount is None:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USDT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        return

    min_usdt = 0.1
    rate = await get_exchange_rate_rub_to_usdt()
    min_rub = (min_usdt / rate) if rate else 9.0
    
    if balance <= 0 or usdt_amount < min_usdt:
        await message.answer(
            f"üíº <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {format_currency(balance)}\n"
            f"üíµ –í USDT: ~{usdt_amount:.4f} USDT\n\n"
            f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞: <b>{min_rub:.2f} ‚ÇΩ</b> (~{min_usdt:.1f} USDT)",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–≤–æ–¥–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–≤–µ—Å—Ç–∏ –≤–µ—Å—å –±–∞–ª–∞–Ω—Å", callback_data="withdraw_balance")]
    ])
    
    await message.answer(
        f"üíº <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: {format_currency(balance)}\n"
        f"üíµ –í USDT: ~{usdt_amount:.4f} USDT\n\n"
        f"‚ö° –í—ã–≤–æ–¥–∏–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞ @CryptoBot –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "withdraw_balance")
async def process_balance_withdrawal(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞"""
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    balance = user['balance']
    
    if balance <= 0:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
        return
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USDT –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º—É–º CryptoBot
    usdt_amount = await calculate_usdt_amount(balance)
    if usdt_amount is None:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USDT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
        return

    min_usdt = 0.1
    if usdt_amount < min_usdt:
        rate = await get_exchange_rate_rub_to_usdt()
        min_rub = (min_usdt / rate) if rate else 9.0
        await callback.answer(
            f"‚ùå –ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_usdt:.1f} USDT (~{min_rub:.2f} ‚ÇΩ)",
            show_alert=True
        )
        return
    
    await callback.message.edit_text(
        f"‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞...</b>\n\n"
        f"üí∞ –°—É–º–º–∞: {format_currency(balance)}\n"
        f"üíµ –í USDT: ~{usdt_amount:.4f} USDT",
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º USDT —á–µ—Ä–µ–∑ Crypto Pay
    import uuid
    spend_id = f"balance_{callback.from_user.id}_{uuid.uuid4().hex[:8]}"
    
    result = await send_payment(
        user_id=callback.from_user.id,
        username=user.get('username', 'unknown'),
        spend_id=spend_id,
        amount_rub=balance,
        comment="–í—ã–≤–æ–¥ —Å –±–∞–ª–∞–Ω—Å–∞"
    )
    
    if result['success']:
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞
        await db.update_user_balance(callback.from_user.id, balance, operation='subtract')
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {format_currency(balance)}\n"
            f"üíµ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ~{usdt_amount:.4f} USDT\n\n"
            f"‚ö° –°—Ä–µ–¥—Å—Ç–≤–∞ —É–∂–µ –Ω–∞ –≤–∞—à–µ–º @CryptoBot –∞–∫–∫–∞—É–Ω—Ç–µ.",
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∏–¥–µ–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
        videos = await db.get_user_videos(callback.from_user.id)
        approved_videos = [v for v in videos if v['status'] == 'approved']
        
        videos_info = ""
        for i, video in enumerate(approved_videos[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
            videos_info += (
                f"\n{i}. [{video.get('platform', 'N/A').upper()}] "
                f"{video.get('views', 0):,} üëÅ - "
                f"{video.get('video_url', '–Ω–µ—Ç —Å—Å—ã–ª–∫–∏')}"
            )
        
        if len(approved_videos) > 5:
            videos_info += f"\n... –∏ –µ—â–µ {len(approved_videos) - 5} –≤–∏–¥–µ–æ"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await send_to_admin_chat(
            callback.bot,
            f"üí∏ <b>–ú–ì–ù–û–í–ï–ù–ù–´–ô –í–´–í–û–î</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
            f"  ‚Ä¢ –ò–º—è: {user['full_name']}\n"
            f"  ‚Ä¢ Username: @{user.get('username', '–Ω–µ—Ç')}\n"
            f"  ‚Ä¢ ID: {callback.from_user.id}\n\n"
            f"üí∞ <b>–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞:</b> {format_currency(balance)} (~{usdt_amount:.4f} USDT)\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"  ‚Ä¢ –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {len(videos)}\n"
            f"  ‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {len(approved_videos)}\n"
            f"  ‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: {user.get('referral_earnings', 0):.2f} ‚ÇΩ\n"
            f"üìπ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ:</b>{videos_info}\n\n"
            f"‚ö° –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –í—ã–ø–ª–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    else:
        error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞</b>\n\n"
            f"‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: {error_msg}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
        
        await callback.answer(f"‚ùå {error_msg}", show_alert=True)
