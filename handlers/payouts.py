"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã–ø–ª–∞—Ç —á–µ—Ä–µ–∑ Crypto Pay
"""
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from core.database import Database
from core.crypto_pay import calculate_usdt_amount
from core import config
from core.utils import send_to_admin_chat

logger = logging.getLogger(__name__)

router = Router()
db = Database(config.DATABASE_PATH)


async def calculate_payout_amount(views: int, platform: str, user_id: int = None, video_id: int = None) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã
    
    Args:
        views: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–¥–ª—è TikTok)
        platform: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ('tiktok' –∏–ª–∏ 'youtube')
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        video_id: ID –≤–∏–¥–µ–æ (–¥–ª—è YouTube —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏)
        
    Returns:
        float: –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
    """
    if platform == 'tiktok':
        # TikTok: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 65‚ÇΩ –∑–∞ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        rate = config.TIKTOK_RATE_PER_1000_VIEWS
        amount = (views / 1000) * rate
        
    elif platform == 'youtube':
        # YouTube: –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
        if video_id:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤–∏–¥–µ–æ
            video = await db.get_video(video_id)
            if video and video.get('earnings', 0) > 0:
                amount = video['earnings']
            else:
                # –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
                amount = 0
        else:
            # –ë–µ–∑ video_id –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞–≤–∫—É
            amount = 0
    else:
        amount = 0
    
    return round(amount, 2)


async def format_payout_notification(
    video_data: dict,
    user_id: int,
    username: str,
    full_name: str,
    payout_amount: float,
    usdt_amount: float
) -> str:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–ª–∞—Ç–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    
    platform_emoji = "üéµ" if video_data['platform'] == 'tiktok' else "üì∫"
    platform_name = "TikTok" if video_data['platform'] == 'tiktok' else "YouTube"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel_info = video_data.get('channel_info', {})
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tier = await db.get_user_tier(user_id)
    tier_emoji = "ü•â" if user_tier == "bronze" else "ü•á"
    tier_desc = "–ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º" if user_tier == "bronze" else "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    
    if video_data['platform'] == 'tiktok':
        channel_display = f"@{channel_info.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}"
    else:
        channel_display = channel_info.get('channel_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        rate = channel_info.get('rate_per_1000_views', 0)  # –î–ª—è YouTube –∞–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É
    
    text = (
        f"üí∞ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</b>\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
        f"  ‚Ä¢ –ò–º—è: {full_name}\n"
        f"  ‚Ä¢ Username: @{username}\n"
        f"  ‚Ä¢ ID: <code>{user_id}</code>\n"
        f"  ‚Ä¢ {tier_emoji} –£—Ä–æ–≤–µ–Ω—å: <b>{user_tier.upper()}</b> ({tier_desc})\n\n"
        f"{platform_emoji} <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform_name}\n"
        f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_display}\n"
    )
    
    if video_data['platform'] == 'youtube':
        text += f"üìä <b>–°—Ç–∞–≤–∫–∞:</b> {rate} ‚ÇΩ –∑–∞ 1K –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
    
    text += (
        f"\nüé¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ:</b>\n"
        f"  ‚Ä¢ ID: <code>{video_data['id']}</code>\n"
    )
    
    if video_data.get('video_title'):
        title = video_data['video_title']
        if len(title) > 60:
            title = title[:60] + "..."
        text += f"  ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
    
    text += (
        f"  ‚Ä¢ URL: {video_data['video_url']}\n\n"
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–¥–µ–æ:</b>\n"
        f"  ‚Ä¢ üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {video_data['views']:,}\n"
        f"  ‚Ä¢ ‚ù§Ô∏è –õ–∞–π–∫–∏: {video_data.get('likes', 0):,}\n"
        f"  ‚Ä¢ üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {video_data.get('comments', 0):,}\n"
    )
    
    if video_data.get('shares'):
        text += f"  ‚Ä¢ üîÑ –†–µ–ø–æ—Å—Ç—ã: {video_data['shares']:,}\n"
    
    text += f"\nüí∏ <b>–†–∞—Å—á–µ—Ç –≤—ã–ø–ª–∞—Ç—ã:</b>\n"
    
    if video_data['platform'] == 'tiktok':
        text += (
            f"  ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {video_data['views']:,}\n"
            f"  ‚Ä¢ –°—Ç–∞–≤–∫–∞: {config.TIKTOK_RATE_PER_1000_VIEWS} ‚ÇΩ / 1000 üëÅ\n"
            f"  ‚Ä¢ –§–æ—Ä–º—É–ª–∞: {video_data['views']:,} / 1000 √ó {config.TIKTOK_RATE_PER_1000_VIEWS}\n"
        )
    else:  # youtube
        text += f"  ‚Ä¢ üíµ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –∑–∞ –≤–∏–¥–µ–æ\n"
    
    text += (
        f"  ‚Ä¢ <b>–°—É–º–º–∞: {payout_amount:.2f} ‚ÇΩ</b>\n"
        f"  ‚Ä¢ <b>–í USDT: ~{usdt_amount:.6f} USDT</b>\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    return text


@router.callback_query(F.data.startswith("request_payout_"))
async def request_payout_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –ø–æ –≤–∏–¥–µ–æ"""
    
    video_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    video = await db.get_video_with_details(video_id)
    
    if not video:
        await callback.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if video['user_id'] != callback.from_user.id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –≤–∏–¥–µ–æ!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ
    if video['status'] != 'approved':
        await callback.answer(
            "‚ùå –í—ã–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ!",
            show_alert=True
        )
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã
    views = video['views']
    platform = video['platform']
    user_id = video['user_id']
    
    payout_amount = await calculate_payout_amount(views, platform, user_id, video_id)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USDT
    usdt_amount = await calculate_usdt_amount(payout_amount)
    
    if usdt_amount is None:
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º tier –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)
    tier = user.get('tier', 'bronze') if user else 'bronze'
    username = user.get('username') if user else callback.from_user.username
    
    # –ï—Å–ª–∏ –Ω–µ—Ç username, –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id
    if not username:
        username = f"user_{user_id}"
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
    current_balance = user.get('balance', 0)
    await callback.message.edit_text(
        f"‚ÑπÔ∏è <b>–ë–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>\n\n"
        f"üìä –í–∏–¥–µ–æ ID: {video_id}\n"
        f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views:,}\n"
        f"üí∞ –†–∞—Å—á–µ—Ç–Ω–∞—è —Å—É–º–º–∞: {payout_amount:.2f} ‚ÇΩ\n\n"
        f"üíº <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {current_balance:.2f} ‚ÇΩ\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é \"üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\".",
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –ë–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")


@router.callback_query(F.data.startswith("approve_payout_"))
async def approve_payout_callback(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –≤—ã–ø–ª–∞—Ç—É"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    payout_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–ª–∞—Ç–µ
    payout = await db.get_payout_by_id(payout_id)
    
    if not payout:
        await callback.answer("‚ùå –í—ã–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    if payout['status'] != 'pending':
        await callback.answer(
            f"‚ùå –í—ã–ø–ª–∞—Ç–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n–°—Ç–∞—Ç—É—Å: {payout['status']}",
            show_alert=True
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ 24—á –¥–ª—è bronze)
    user_tier = await db.get_user_tier(payout['user_id'])
    
    # –î–ª—è bronze –∏ gold –≤—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await callback.message.edit_text(
        f"{callback.message.text}\n\n"
        f"‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–ª–∞—Ç—ã...</b>",
        parse_mode="HTML"
    )
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å
    await db.update_payout_status(
        payout_id=payout_id,
        status='paid',
        admin_id=callback.from_user.id
    )
    await db.update_user_balance(payout['user_id'], payout['amount_rub'], operation='add')
    await db.update_user_stats_withdrawal(payout['user_id'], payout['amount_rub'])

    updated_user = await db.get_user(payout['user_id'])
    new_balance = updated_user.get('balance', 0)

    await callback.message.edit_text(
        f"{callback.message.text.split('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞')[0]}\n"
        f"‚úÖ <b>–ù–ê–ß–ò–°–õ–ï–ù–û –ù–ê –ë–ê–õ–ê–ù–°</b>\n\n"
        f"üí∞ –°—É–º–º–∞: {payout['amount_rub']:.2f} ‚ÇΩ\n"
        f"üíº –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_balance:.2f} ‚ÇΩ\n"
        f"üë®‚Äçüíº –ê–¥–º–∏–Ω: {callback.from_user.full_name}\n"
        f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        parse_mode="HTML"
    )

    try:
        await callback.bot.send_message(
            chat_id=payout['user_id'],
            text=(
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                f"‚úÖ –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –ø–æ –≤–∏–¥–µ–æ #{payout['video_id']} –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {payout['amount_rub']:.2f} ‚ÇΩ\n"
                f"üíº –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} ‚ÇΩ\n\n"
                f"–ú–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ \"üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\"."
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {payout['user_id']}: {e}")

    await callback.answer("‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å!")


@router.callback_query(F.data.startswith("reject_payout_"))
async def reject_payout_callback(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤—ã–ø–ª–∞—Ç—É"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    payout_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–ª–∞—Ç–µ
    payout = await db.get_payout_by_id(payout_id)
    
    if not payout:
        await callback.answer("‚ùå –í—ã–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    if payout['status'] != 'pending':
        await callback.answer(
            f"‚ùå –í—ã–ø–ª–∞—Ç–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n–°—Ç–∞—Ç—É—Å: {payout['status']}",
            show_alert=True
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await db.update_payout_status(
        payout_id=payout_id,
        status='rejected',
        admin_id=callback.from_user.id
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await callback.message.edit_text(
        f"{callback.message.text}\n\n"
        f"‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û</b>\n"
        f"üë®‚Äçüíº –ê–¥–º–∏–Ω: {callback.from_user.full_name}\n"
        f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        parse_mode="HTML"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(
            chat_id=payout['user_id'],
            text=(
                f"‚ùå <b>–í—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                f"üÜî ID –≤—ã–ø–ª–∞—Ç—ã: <code>{payout_id}</code>\n"
                f"üí∞ –°—É–º–º–∞: {payout['amount_rub']:.2f} ‚ÇΩ\n\n"
                f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {payout['user_id']}: {e}")
    
    await callback.answer("‚úÖ –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")


# ==========================================
# –ê–î–ú–ò–ù–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø BRONZE –í–´–ü–õ–ê–¢
# ==========================================

@router.callback_query(F.data.startswith("admin_payout_"))
async def admin_approve_payout(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –≤—ã–ø–ª–∞—Ç—É –¥–ª—è Bronze –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from core import config
    
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    video_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    video = await db.get_video_with_details(video_id)
    
    if not video:
        await callback.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    user_id = video['user_id']
    views = video['views']
    platform = video['platform']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
    payout_amount = await calculate_payout_amount(views, platform, user_id, video_id)
    usdt_amount = await calculate_usdt_amount(payout_amount)
    
    if not usdt_amount:
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)
    username = user.get('username') if user else None
    if not username:
        username = f"user_{user_id}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º spend_id
    spend_id = f"video_{video_id}_{datetime.now().timestamp()}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–ø–ª–∞—Ç—É
    await callback.message.edit_text(
        f"‚è≥ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–ø–ª–∞—Ç—ã...</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üí∞ –°—É–º–º–∞: {payout_amount:.2f} ‚ÇΩ (~{usdt_amount:.4f} USDT)",
        parse_mode="HTML"
    )
    
    payment_result = await send_payment(
        user_id=user_id,
        username=username,
        amount_usdt=usdt_amount,
        spend_id=spend_id,
        comment=f"–í—ã–ø–ª–∞—Ç–∞ –∑–∞ –≤–∏–¥–µ–æ #{video_id}"
    )
    
    if payment_result['success']:
        # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã (10% –æ—Ç –≤—ã–ø–ª–∞—Ç—ã)
        if user and user.get('referrer_id'):
            referral_amount = payout_amount * 0.10
            await db.add_referral_earning(
                referrer_id=user['referrer_id'],
                referred_id=user_id,
                amount=referral_amount
            )
            logger.info(f"Referral bonus {referral_amount:.2f} RUB credited to user {user['referrer_id']} from video {video_id}")
        
        await callback.message.edit_text(
            f"‚úÖ <b>–í—ã–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (@{username})\n"
            f"üÜî ID: {user_id}\n"
            f"üìä –í–∏–¥–µ–æ ID: {video_id}\n"
            f"üí∞ –°—É–º–º–∞: {payout_amount:.2f} ‚ÇΩ (~{usdt_amount:.4f} USDT)\n\n"
            f"‚úÖ –î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ @CryptoBot –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await callback.bot.send_message(
                user_id,
                f"‚úÖ <b>–í—ã–ø–ª–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
                f"üí∞ –°—É–º–º–∞: {payout_amount:.2f} ‚ÇΩ (~{usdt_amount:.4f} USDT)\n"
                f"üìä –í–∏–¥–µ–æ ID: {video_id}\n\n"
                f"üí≥ –î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à @CryptoBot –∞–∫–∫–∞—É–Ω—Ç!\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ.",
                parse_mode="HTML"
            )
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        await send_to_admin_chat(
            callback.bot,
            f"üí∏ <b>–í–´–ü–õ–ê–¢–ê –ó–ê –í–ò–î–ï–û (BRONZE)</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
            f"  ‚Ä¢ –ò–º—è: {user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"  ‚Ä¢ Username: @{username}\n"
            f"  ‚Ä¢ ID: {user_id}\n"
            f"  ‚Ä¢ Tier: ü•â BRONZE\n\n"
            f"üìπ <b>–í–∏–¥–µ–æ:</b>\n"
            f"  ‚Ä¢ ID: #{video_id}\n"
            f"  ‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.upper()}\n"
            f"  ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views:,}\n"
            f"  ‚Ä¢ –°—Å—ã–ª–∫–∞: {video.get('video_url', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}\n\n"
            f"üí∞ <b>–°—É–º–º–∞:</b>\n"
            f"  ‚Ä¢ –†—É–±–ª–∏: {payout_amount:.2f} ‚ÇΩ\n"
            f"  ‚Ä¢ USDT: ~{usdt_amount:.4f}\n\n"
            f"üë®‚Äçüíº <b>–û–¥–æ–±—Ä–∏–ª:</b> {callback.from_user.full_name}\n"
            f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    else:
        error_msg = payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–ø–ª–∞—Ç—ã!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"üìä –í–∏–¥–µ–æ ID: {video_id}\n"
            f"üí∞ –°—É–º–º–∞: {payout_amount:.2f} ‚ÇΩ\n\n"
            f"‚ùå –û—à–∏–±–∫–∞: {error_msg}",
            parse_mode="HTML"
        )
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", show_alert=True)


@router.callback_query(F.data.startswith("admin_reject_payout_"))
async def admin_reject_payout(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤—ã–ø–ª–∞—Ç—É –¥–ª—è Bronze –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from core import config
    
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    video_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    video = await db.get_video_with_details(video_id)
    
    if not video:
        await callback.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    user_id = video['user_id']
    user = await db.get_user(user_id)
    
    await callback.message.edit_text(
        f"‚ùå <b>–í—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üÜî ID: {user_id}\n"
        f"üìä –í–∏–¥–µ–æ ID: {video_id}\n\n"
        f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        parse_mode="HTML"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(
            user_id,
            f"‚ùå <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
            f"üìä –í–∏–¥–µ–æ ID: {video_id}\n\n"
            f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            parse_mode="HTML"
        )
    except:
        pass
    
    await callback.answer("‚ùå –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
