from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.database import Database
from core.keyboards import (
    main_menu_keyboard, profile_keyboard, confirm_keyboard, cancel_keyboard
)
from core.utils import format_currency
from core import config

router = Router()
db = Database(config.DATABASE_PATH)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    user = await db.get_user(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    referrer_id = None
    if message.text and len(message.text.split()) > 1:
        from core.utils import parse_referral_code
        referrer_id = parse_referral_code(message.text.split()[1])
    
    if not user:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.add_user(
            user_id=message.from_user.id,
            username=message.from_user.username or "",
            full_name=message.from_user.full_name,
            referrer_id=referrer_id
        )
        
        welcome_text = (
            "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ZenithMedia Bot!</b>\n\n"
            "–í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    else:
        welcome_text = (
            "üëã <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    
    await message.answer(welcome_text, reply_markup=main_menu_keyboard(), parse_mode="HTML")


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    payment_methods = await db.get_payment_methods(message.from_user.id)
    referral_stats = await db.get_referral_stats(message.from_user.id)
    tiktok = await db.get_user_tiktok(message.from_user.id)
    youtube = await db.get_user_youtube(message.from_user.id)
    
    payment_text = "\n".join([f"  ‚Ä¢ {pm['method_type']}" for pm in payment_methods]) if payment_methods else "–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
    
    # TikTok —Å—Ç–∞—Ç—É—Å
    if tiktok:
        verified_emoji = "‚úÖ" if tiktok['is_verified'] else "‚è≥"
        tiktok_text = f"{verified_emoji} <code>@{tiktok['username']}</code>"
    else:
        tiktok_text = "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    
    # YouTube —Å—Ç–∞—Ç—É—Å
    if youtube:
        verified_emoji = "‚úÖ" if youtube['is_verified'] else "‚è≥"
        youtube_text = f"{verified_emoji} <b>{youtube['channel_name']}</b>"
    else:
        youtube_text = "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    
    from core.utils import generate_referral_link
    bot_username = (await message.bot.me()).username
    referral_link = generate_referral_link(bot_username, message.from_user.id)
    
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üé≠ <b>–ò–º—è:</b> {user['full_name']}\n"
        f"üÜî <b>ID:</b> <code>{user['user_id']}</code>\n"
        f"üì± <b>Username:</b> @{user['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"üéµ <b>TikTok:</b> {tiktok_text}\n"
        f"üì∫ <b>YouTube:</b> {youtube_text}\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{format_currency(user['balance'])}</b>\n"
        f"üé¨ –†–æ–ª–∏–∫–æ–≤: {user['total_videos']}\n"
        f"üëÅ –û–±—â–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {user['total_views']:,}\n"
        f"üì§ –í—ã–≤–µ–¥–µ–Ω–æ –≤—Å–µ–≥–æ: {format_currency(user['total_withdrawn'])}\n\n"
        f"üí≥ <b>–°–ø–æ—Å–æ–±—ã –≤—ã–ø–ª–∞—Ç:</b>\n{payment_text}\n\n"
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{referral_link}</code>\n"
        f"üíµ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{format_currency(referral_stats['total_earnings'])}</b>\n"
        f"üë§ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_stats['total_referrals']}"
    )
    
    await message.answer(profile_text, reply_markup=profile_keyboard(has_tiktok=bool(tiktok), has_youtube=bool(youtube), balance=user['balance']), parse_mode="HTML")


@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    await callback.message.delete()
    
    user = await db.get_user(callback.from_user.id)
    payment_methods = await db.get_payment_methods(callback.from_user.id)
    referral_stats = await db.get_referral_stats(callback.from_user.id)
    tiktok = await db.get_user_tiktok(callback.from_user.id)
    youtube = await db.get_user_youtube(callback.from_user.id)
    
    payment_text = "\n".join([f"  ‚Ä¢ {pm['method_type']}" for pm in payment_methods]) if payment_methods else "–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
    
    # TikTok —Å—Ç–∞—Ç—É—Å
    if tiktok:
        verified_emoji = "‚úÖ" if tiktok['is_verified'] else "‚è≥"
        tiktok_text = f"{verified_emoji} <code>@{tiktok['username']}</code>"
    else:
        tiktok_text = "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    
    # YouTube —Å—Ç–∞—Ç—É—Å
    if youtube:
        verified_emoji = "‚úÖ" if youtube['is_verified'] else "‚è≥"
        youtube_text = f"{verified_emoji} <b>{youtube['channel_name']}</b>"
    else:
        youtube_text = "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    
    from core.utils import generate_referral_link
    bot_username = (await callback.bot.me()).username
    referral_link = generate_referral_link(bot_username, callback.from_user.id)
    
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üé≠ <b>–ò–º—è:</b> {user['full_name']}\n"
        f"üÜî <b>ID:</b> <code>{user['user_id']}</code>\n"
        f"üì± <b>Username:</b> @{user['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"üéµ <b>TikTok:</b> {tiktok_text}\n"
        f"üì∫ <b>YouTube:</b> {youtube_text}\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{format_currency(user['balance'])}</b>\n"
        f"üé¨ –†–æ–ª–∏–∫–æ–≤: {user['total_videos']}\n"
        f"üëÅ –û–±—â–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {user['total_views']:,}\n"
        f"üì§ –í—ã–≤–µ–¥–µ–Ω–æ –≤—Å–µ–≥–æ: {format_currency(user['total_withdrawn'])}\n\n"
        f"üí≥ <b>–°–ø–æ—Å–æ–±—ã –≤—ã–ø–ª–∞—Ç:</b>\n{payment_text}\n\n"
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{referral_link}</code>\n"
        f"üíµ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{format_currency(referral_stats['total_earnings'])}</b>\n"
        f"üë§ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_stats['total_referrals']}"
    )
    
    await callback.message.answer(profile_text, reply_markup=profile_keyboard(has_tiktok=bool(tiktok), has_youtube=bool(youtube), balance=user['balance']), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("cancel_"))
async def cancel_action(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


@router.callback_query(F.data == "cancel")
async def cancel_state(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.delete()
    await callback.message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()
