from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.database import Database
from core.keyboards import admin_keyboard, withdrawal_action_keyboard
from core.utils import format_currency, format_timestamp, get_status_text
from core.crypto_pay import check_transfer_settings, get_app_balance, create_invoice, get_invoice_status
from core import config

router = Router()
db = Database(config.DATABASE_PATH)


class BroadcastStates(StatesGroup):
    waiting_for_message = State()


class TopUpStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_currency = State()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in config.ADMIN_IDS


@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")
        return
    
    stats = await db.get_stats()
    
    admin_text = (
        f"üëë <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {format_currency(stats.get('total_balance', 0) or 0)}\n"
        f"üé¨ –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {stats.get('total_videos', 0)}\n"
        f"üëÅ –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats.get('total_views', 0) or 0:,}\n"
        f"üí∏ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: {format_currency(stats.get('total_withdrawn', 0) or 0)}\n"
        f"üìã –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥: {stats.get('total_withdrawals', 0)}\n"
    )
    
    await message.answer(admin_text, reply_markup=admin_keyboard(), parse_mode="HTML")


@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    stats = await db.get_stats()
    
    stats_text = (
        f"üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_users', 0)}\n"
        f"‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {format_currency(stats.get('total_balance', 0) or 0)}\n\n"
        f"<b>üé¨ –í–∏–¥–µ–æ:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Ä–æ–ª–∏–∫–æ–≤: {stats.get('total_videos', 0)}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats.get('total_views', 0) or 0:,}\n\n"
        f"<b>üí∞ –í—ã–ø–ª–∞—Ç—ã:</b>\n"
        f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç: {stats.get('total_withdrawals', 0)}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: {format_currency(stats.get('total_withdrawn', 0) or 0)}\n"
    )
    
    await callback.message.edit_text(stats_text, reply_markup=admin_keyboard(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "admin_withdrawals")
async def admin_withdrawals(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    requests = await db.get_all_withdrawal_requests(status="pending")
    
    if not requests:
        await callback.message.edit_text(
            "üì≠ <b>–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥</b>",
            reply_markup=admin_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    requests_text = f"üí∞ <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ ({len(requests)})</b>\n\n"
    
    for req in requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        created_at = format_timestamp(req['created_at'])
        requests_text += (
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üÜî ID: <code>{req['id']}</code>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {req['full_name']} (@{req['username']})\n"
            f"üí∞ –°—É–º–º–∞: <b>{format_currency(req['amount'])}</b>\n"
            f"üí≥ –°–ø–æ—Å–æ–±: {req['payment_method']}\n"
            f"üìã –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{req['payment_details']}</code>\n"
            f"üìÖ –î–∞—Ç–∞: {created_at}\n"
            f"\n/process_{req['id']} - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É\n"
        )
    
    if len(requests) > 5:
        requests_text += f"\n... –∏ –µ—â–µ {len(requests) - 5} –∑–∞—è–≤–æ–∫"
    
    await callback.message.edit_text(requests_text, reply_markup=admin_keyboard(), parse_mode="HTML")
    await callback.answer()


@router.message(F.text.startswith("/process_"))
async def process_withdrawal(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    try:
        request_id = int(message.text.split("_")[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    requests = await db.get_all_withdrawal_requests(status="pending")
    request = next((r for r in requests if r['id'] == request_id), None)
    
    if not request:
        await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
        return
    
    request_text = (
        f"üí∞ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #{request_id}</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request['full_name']} (@{request['username']})\n"
        f"üÜî User ID: <code>{request['user_id']}</code>\n"
        f"üí∞ –°—É–º–º–∞: <b>{format_currency(request['amount'])}</b>\n"
        f"üí≥ –°–ø–æ—Å–æ–±: {request['payment_method']}\n"
        f"üìã –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{request['payment_details']}</code>\n"
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {format_timestamp(request['created_at'])}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(
        request_text,
        reply_markup=withdrawal_action_keyboard(request_id),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("approve_withdrawal_"))
async def approve_withdrawal(callback: CallbackQuery):
    """–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    request_id = int(callback.data.split("_")[2])
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
    await db.process_withdrawal(request_id, success=True)
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{request_id} –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
        f"–°—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        parse_mode="HTML"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    requests = await db.get_all_withdrawal_requests(status="completed")
    request = next((r for r in requests if r['id'] == request_id), None)
    
    if request:
        try:
            await callback.bot.send_message(
                request['user_id'],
                f"‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
                f"üÜî ID –∑–∞—è–≤–∫–∏: <code>{request_id}</code>\n"
                f"üí∞ –°—É–º–º–∞: <b>{format_currency(request['amount'])}</b>\n"
                f"üí≥ –°–ø–æ—Å–æ–±: {request['payment_method']}\n\n"
                f"–°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.",
                parse_mode="HTML"
            )
        except:
            pass
    
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")


@router.callback_query(F.data.startswith("reject_withdrawal_"))
async def reject_withdrawal(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    request_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º
    requests = await db.get_all_withdrawal_requests(status="pending")
    request = next((r for r in requests if r['id'] == request_id), None)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
    await db.process_withdrawal(request_id, success=False)
    
    await callback.message.edit_text(
        f"‚ùå <b>–ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>",
        parse_mode="HTML"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if request:
        try:
            await callback.bot.send_message(
                request['user_id'],
                f"‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                f"üÜî ID –∑–∞—è–≤–∫–∏: <code>{request_id}</code>\n"
                f"üí∞ –°—É–º–º–∞: <b>{format_currency(request['amount'])}</b>\n\n"
                f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã.",
                parse_mode="HTML"
            )
        except:
            pass
    
    await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")


@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ.",
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.waiting_for_message)
    await callback.answer()


@router.message(BroadcastStates.waiting_for_message)
async def admin_broadcast_send(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    if not is_admin(message.from_user.id):
        return
    
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    await message.answer("‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    # users = await db.get_all_users()
    # success = 0
    # failed = 0
    # for user in users:
    #     try:
    #         await message.bot.copy_message(user['user_id'], message.chat.id, message.message_id)
    #         success += 1
    #     except:
    #         failed += 1
    
    await message.answer(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: 0",
        parse_mode="HTML"
    )
    await state.clear()


# ========================
# –ú–û–î–ï–†–ê–¶–ò–Ø –í–ò–î–ï–û
# ========================

@router.callback_query(F.data.startswith("approve_video_"))
async def approve_video(callback: CallbackQuery):
    """–û–¥–æ–±—Ä–∏—Ç—å –≤–∏–¥–µ–æ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return

    video_id = int(callback.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    video = await db.get_video(video_id)
    if not video:
        await callback.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return

    user = await db.get_user(video['user_id'])
    tier = user.get('tier', 'bronze') if user else 'bronze'

    platform = video.get('platform', 'tiktok')
    author = video.get('video_author') or video.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    views = video['views']

    from handlers.payouts import calculate_payout_amount
    from core.crypto_pay import calculate_usdt_amount, send_payment

    payout_amount = await calculate_payout_amount(views, platform, video['user_id'], video_id)
    usdt_amount = await calculate_usdt_amount(payout_amount)
    if not usdt_amount:
        usdt_amount = 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –≤ USDT (–¥–ª—è TikTok)
    min_usdt_for_payout = 1.0  # –ú–∏–Ω–∏–º—É–º 1 USDT –¥–ª—è –ø—Ä—è–º–æ–π –≤—ã–ø–ª–∞—Ç—ã
    
    # –ï—Å–ª–∏ TikTok –∏ –º–µ–Ω—å—à–µ 1$ - –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å
    if platform == 'tiktok' and usdt_amount < min_usdt_for_payout:
        await db.update_video_status(video_id, "approved")
        await db.update_user_balance(video['user_id'], payout_amount, operation='add')  # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å
        
        await callback.message.edit_text(
            f"‚úÖ <b>–í–∏–¥–µ–æ #{video_id} –æ–¥–æ–±—Ä–µ–Ω–æ!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {video['user_id']}\n"
            f"üì∫ –ê–≤—Ç–æ—Ä: @{author}\n"
            f"üéµ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: TikTok\n"
            f"üí∞ –°—É–º–º–∞: {payout_amount:.2f} ‚ÇΩ (~{usdt_amount:.4f} USDT)\n\n"
            f"üíº –ú–µ–Ω—å—à–µ 1$ - –Ω–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å",
            parse_mode="HTML"
        )
        
        await callback.bot.send_message(
            video['user_id'],
            f"‚úÖ <b>–í–∞—à–µ TikTok –≤–∏–¥–µ–æ –æ–¥–æ–±—Ä–µ–Ω–æ!</b>\n\n"
            f"üÜî ID –≤–∏–¥–µ–æ: <code>{video_id}</code>\n"
            f"üí∞ –°—É–º–º–∞: {payout_amount:.2f} ‚ÇΩ (~{usdt_amount:.4f} USDT)\n\n"
            f"üíº <b>–ù–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å</b> (–º–µ–Ω—å—à–µ 1$)\n"
            f"–í—ã–≤–æ–¥–∏—Ç–µ —Å –±–∞–ª–∞–Ω—Å–∞ –æ—Ç 1$ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\"",
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ! –î–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å")
        return
    
    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ - –ø—Ä—è–º–∞—è –≤—ã–ø–ª–∞—Ç–∞
    # –ü–æ–ª—É—á–∞–µ–º username –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
    username = user.get('username') if user else None
    if not username:
        username = f"user_{video['user_id']}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º spend_id
    from datetime import datetime
    spend_id = f"video_{video_id}_{datetime.now().timestamp()}"
    
    if tier == 'gold':
        # Gold-tier: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–ø–ª–∞—Ç–∞
        await db.update_video_status(video_id, "approved")
        
        payment_result = await send_payment(
            user_id=video['user_id'],
            username=username,
            spend_id=spend_id,
            amount_usdt=usdt_amount,
            comment=f"–í—ã–ø–ª–∞—Ç–∞ –∑–∞ –≤–∏–¥–µ–æ #{video_id}"
        )
        
        if payment_result['success']:
            await callback.bot.send_message(
                video['user_id'],
                f"‚úÖ <b>–í–∞—à–µ –≤–∏–¥–µ–æ –æ–¥–æ–±—Ä–µ–Ω–æ!</b>\n\n"
                f"üÜî ID –≤–∏–¥–µ–æ: <code>{video_id}</code>\n"
                f"üîó {video['video_url']}\n\n"
                f"üíµ –í—ã–ø–ª–∞—Ç–∞: {payout_amount:.2f} ‚ÇΩ (~{usdt_amount:.4f} USDT)",
                parse_mode="HTML"
            )
            await callback.answer("‚úÖ –í–∏–¥–µ–æ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –≤—ã–ø–ª–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        else:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {payment_result.get('error')}", show_alert=True)
    else:
        # Bronze-tier: —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–∏–µ, –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–ø–ª–∞—Ç—ã
        await db.update_video_status(video_id, "approved")
        await callback.message.edit_text(
            f"‚úÖ <b>–í–∏–¥–µ–æ #{video_id} –æ–¥–æ–±—Ä–µ–Ω–æ!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {video['user_id']}\n"
            f"üì∫ –ê–≤—Ç–æ—Ä: @{author}\n"
            f"üîó {video['video_url']}\n\n"
            f"üíµ –°—É–º–º–∞: {payout_amount:.2f} ‚ÇΩ (~{usdt_amount:.4f} USDT)\n\n"
            f"‚è≥ <b>–í—ã–ø–ª–∞—Ç–∞ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n"
            f"Bronze –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É –∫–Ω–æ–ø–∫–æ–π \"üí∞ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É\"",
            parse_mode="HTML"
        )
        await callback.bot.send_message(
            video['user_id'],
            f"‚úÖ <b>–í–∞—à–µ –≤–∏–¥–µ–æ –æ–¥–æ–±—Ä–µ–Ω–æ!</b>\n\n"
            f"üÜî ID –≤–∏–¥–µ–æ: <code>{video_id}</code>\n"
            f"üîó {video['video_url']}\n\n"
            f"üíµ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {payout_amount:.2f} ‚ÇΩ (~{usdt_amount:.4f} USDT)\n\n"
            f"üí∞ –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üí∞ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É\" –≤ –º–µ–Ω—é –≤–∏–¥–µ–æ.",
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –í–∏–¥–µ–æ –æ–¥–æ–±—Ä–µ–Ω–æ!")


@router.callback_query(F.data == "admin_tiers")
async def admin_tiers_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    tier_text = (
        f"ü•âü•á <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:</b>\n"
        f"ü•â <b>Bronze (–ë—Ä–æ–Ω–∑–æ–≤—ã–π)</b>\n"
        f"  ‚Ä¢ –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º\n"
        f"  ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\n\n"
        f"ü•á <b>Gold (–ó–æ–ª–æ—Ç–æ–π)</b>\n"
        f"  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–ø–ª–∞—Ç–∞\n"
        f"  ‚Ä¢ –î–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        f"<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        f"<code>/set_tier USER_ID bronze</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Bronze\n"
        f"<code>/set_tier USER_ID gold</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Gold\n"
        f"<code>/get_tier USER_ID</code> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        f"<code>/set_tier 7916638098 gold</code>"
    )
    
    from core.keyboards import admin_keyboard
    await callback.message.edit_text(tier_text, reply_markup=admin_keyboard(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "admin_topup")
async def admin_topup_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    balance = await get_app_balance()
    
    balance_text = "üí∞ <b>–ë–∞–ª–∞–Ω—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>\n"
    if balance:
        for currency, amount in balance.items():
            if amount > 0:
                balance_text += f"  ‚Ä¢ {currency}: {amount:.2f}\n"
        if not any(amount > 0 for amount in balance.values()):
            balance_text += "  ‚Ä¢ –ë–∞–ª–∞–Ω—Å –ø—É—Å—Ç\n"
    else:
        balance_text += "  ‚Ä¢ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞\n"
    
    topup_text = (
        f"üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
        f"{balance_text}\n"
        f"<b>–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:</b>\n"
        f"<code>/create_invoice 50 USDT</code> - 50 USDT\n"
        f"<code>/create_invoice 100 USDT</code> - 100 USDT\n"
        f"<code>/create_invoice 1 TON</code> - 1 TON\n\n"
        f"<b>–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Å—É–º–º–∞:</b>\n"
        f"<code>/create_invoice &lt;—Å—É–º–º–∞&gt; &lt;–≤–∞–ª—é—Ç–∞&gt;</code>\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        f"<code>/create_invoice 75.50 USDT</code>\n\n"
        f"<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n"
        f"USDT, TON, BTC, ETH, USDC, TRX, SOL, BNB –∏ –¥—Ä.\n\n"
        f"<b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞:</b>\n"
        f"<code>/check_invoice &lt;invoice_id&gt;</code>"
    )
    
    from core.keyboards import admin_keyboard
    await callback.message.edit_text(topup_text, reply_markup=admin_keyboard(), parse_mode="HTML")
    await callback.answer()


@router.message(Command("check_crypto"))
async def check_crypto_settings(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Crypto Bot"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Crypto Bot...")
    
    settings = await check_transfer_settings()
    
    if settings.get("errors"):
        error_text = "‚ùå <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:</b>\n\n"
        for error in settings["errors"]:
            error_text += f"‚Ä¢ {error}\n"
        await message.answer(error_text, parse_mode="HTML")
    
    info_text = (
        f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Crypto Bot</b>\n\n"
        f"üì± <b>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
        f"  ‚Ä¢ ID: <code>{settings.get('app_id', 'N/A')}</code>\n"
        f"  ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {settings.get('name', 'N/A')}\n"
        f"  ‚Ä¢ Bot: @{settings.get('payment_processing_bot_username', 'N/A')}\n\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b>\n"
    )
    
    balance = settings.get("balance", {})
    if balance:
        for currency, amount in balance.items():
            info_text += f"  ‚Ä¢ {currency}: {amount:.2f}\n"
    else:
        info_text += "  ‚Ä¢ –ë–∞–ª–∞–Ω—Å –ø—É—Å—Ç\n"
    
    info_text += "\n"
    
    if settings.get("has_balance"):
        info_text += "‚úÖ –ë–∞–ª–∞–Ω—Å USDT –¥–æ—Å—Ç—É–ø–µ–Ω\n"
    else:
        info_text += (
            "‚ö†Ô∏è <b>–ë–∞–ª–∞–Ω—Å USDT = 0</b>\n\n"
            "<b>–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å:</b>\n"
            "1. –û—Ç–∫—Ä–æ–π @CryptoBot\n"
            "2. Wallet ‚Üí USDT\n"
            "3. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å\n"
            "4. My Apps ‚Üí –≤—ã–±–µ—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "5. Transfer ‚Üí –ø–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n"
        )
    
    info_text += (
        "<b>–ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç:</b>\n"
        "1. @CryptoBot ‚Üí My Apps\n"
        "2. –í—ã–±–µ—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (ID: {app_id})\n"
        "3. Settings ‚Üí Security\n"
        "4. –í–∫–ª—é—á–∏ 'Allow Transfers'"
    ).format(app_id=settings.get('app_id', 'N/A'))
    
    await message.answer(info_text, parse_mode="HTML")


@router.message(Command("create_invoice"))
async def create_topup_invoice(message: Message):
    """
    –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_invoice <—Å—É–º–º–∞> <–≤–∞–ª—é—Ç–∞>
    –ü—Ä–∏–º–µ—Ä: /create_invoice 50 USDT
    """
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = message.text.split()
        
        if len(args) < 2:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "<code>/create_invoice &lt;—Å—É–º–º–∞&gt; [–≤–∞–ª—é—Ç–∞]</code>\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "<code>/create_invoice 50 USDT</code>\n"
                "<code>/create_invoice 100 TON</code>\n"
                "<code>/create_invoice 0.001 BTC</code>\n\n"
                "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n"
                "USDT, TON, BTC, ETH, USDC, TRX, SOL –∏ –¥—Ä.",
                parse_mode="HTML"
            )
            return
        
        amount = float(args[1])
        currency = args[2].upper() if len(args) > 2 else "USDT"
        
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
        await message.answer(f"üîÑ –°–æ–∑–¥–∞—é —Å—á–µ—Ç –Ω–∞ {amount} {currency}...")
        
        result = await create_invoice(
            amount=amount,
            currency=currency,
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Zenith Media"
        )
        
        if result["success"]:
            response_text = (
                f"‚úÖ <b>–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {amount} {currency}\n"
                f"üÜî <b>Invoice ID:</b> <code>{result['invoice_id']}</code>\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {result['status']}\n\n"
                f"<b>–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–∑ —Å—Å—ã–ª–æ–∫:</b>\n\n"
                f"ü§ñ <b>–ß–µ—Ä–µ–∑ –±–æ—Ç–∞:</b>\n{result['bot_invoice_url']}\n\n"
            )
            
            if result.get('mini_app_invoice_url'):
                response_text += f"üì± <b>–ß–µ—Ä–µ–∑ Mini App:</b>\n{result['mini_app_invoice_url']}\n\n"
            
            response_text += (
                f"<b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å:</b>\n"
                f"<code>/check_invoice {result['invoice_id']}</code>"
            )
            
            await message.answer(response_text, parse_mode="HTML", disable_web_page_preview=True)
        else:
            await message.answer(result["error"], parse_mode="HTML")
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ 0.001)")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("check_invoice"))
async def check_invoice_status(message: Message):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_invoice <invoice_id>
    """
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    try:
        args = message.text.split()
        
        if len(args) < 2:
            await message.answer(
                "‚ùå <b>–£–∫–∞–∂–∏ ID —Å—á–µ—Ç–∞!</b>\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "<code>/check_invoice &lt;invoice_id&gt;</code>\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>/check_invoice 12345</code>",
                parse_mode="HTML"
            )
            return
        
        invoice_id = int(args[1])
        
        await message.answer(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ {invoice_id}...")
        
        result = await get_invoice_status(invoice_id)
        
        if result["success"]:
            status_emoji = {
                "active": "‚è≥",
                "paid": "‚úÖ",
                "expired": "‚ùå"
            }.get(result["status"], "‚ùì")
            
            status_text = {
                "active": "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
                "paid": "–û–ø–ª–∞—á–µ–Ω",
                "expired": "–ò—Å—Ç–µ–∫"
            }.get(result["status"], result["status"])
            
            response_text = (
                f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞</b>\n\n"
                f"üÜî <b>Invoice ID:</b> <code>{invoice_id}</code>\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {result['amount']} {result['currency']}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
            )
            
            if result.get("paid_at"):
                response_text += f"‚úÖ <b>–û–ø–ª–∞—á–µ–Ω:</b> {result['paid_at']}\n"
            
            if result["status"] == "paid":
                response_text += "\nüéâ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>"
            elif result["status"] == "active":
                response_text += "\n‚è≥ –û–∂–∏–¥–∞—é –æ–ø–ª–∞—Ç—É..."
            
            await message.answer(response_text, parse_mode="HTML")
        else:
            await message.answer(result["error"], parse_mode="HTML")
    
    except ValueError:
        await message.answer("‚ùå Invoice ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
