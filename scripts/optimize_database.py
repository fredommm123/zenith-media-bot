"""
–°–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
"""
import asyncio
import aiosqlite
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DATABASE_PATH = "bot_database.db"


async def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    import shutil
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"bot_database_backup_before_optimization_{timestamp}.db"
    
    try:
        shutil.copy2(DATABASE_PATH, backup_name)
        logger.info(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_name}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        return False


async def add_indexes(db: aiosqlite.Connection):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    indexes = [
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users
        ("idx_users_balance", "CREATE INDEX IF NOT EXISTS idx_users_balance ON users(balance)"),
        ("idx_users_tier", "CREATE INDEX IF NOT EXISTS idx_users_tier ON users(tier)"),
        ("idx_users_referrer", "CREATE INDEX IF NOT EXISTS idx_users_referrer_id ON users(referrer_id)"),
        ("idx_users_created", "CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(created_at)"),
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã videos
        ("idx_videos_user", "CREATE INDEX IF NOT EXISTS idx_videos_user_id ON videos(user_id)"),
        ("idx_videos_status", "CREATE INDEX IF NOT EXISTS idx_videos_status ON videos(status)"),
        ("idx_videos_platform", "CREATE INDEX IF NOT EXISTS idx_videos_platform ON videos(platform)"),
        ("idx_videos_created", "CREATE INDEX IF NOT EXISTS idx_videos_created_at ON videos(created_at)"),
        ("idx_videos_user_status", "CREATE INDEX IF NOT EXISTS idx_videos_user_status ON videos(user_id, status)"),
        ("idx_videos_platform_status", "CREATE INDEX IF NOT EXISTS idx_videos_platform_status ON videos(platform, status)"),
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã youtube_channels
        ("idx_yt_channels_user", "CREATE INDEX IF NOT EXISTS idx_yt_channels_user_id ON youtube_channels(user_id)"),
        ("idx_yt_channels_channel", "CREATE INDEX IF NOT EXISTS idx_yt_channels_channel_id ON youtube_channels(channel_id)"),
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã crypto_payouts
        ("idx_crypto_payouts_user", "CREATE INDEX IF NOT EXISTS idx_crypto_payouts_user_id ON crypto_payouts(user_id)"),
        ("idx_crypto_payouts_status", "CREATE INDEX IF NOT EXISTS idx_crypto_payouts_status ON crypto_payouts(status)"),
        ("idx_crypto_payouts_video", "CREATE INDEX IF NOT EXISTS idx_crypto_payouts_video_id ON crypto_payouts(video_id)"),
        ("idx_crypto_payouts_created", "CREATE INDEX IF NOT EXISTS idx_crypto_payouts_created_at ON crypto_payouts(created_at)"),
        ("idx_crypto_payouts_user_status", "CREATE INDEX IF NOT EXISTS idx_crypto_payouts_user_status ON crypto_payouts(user_id, status)"),
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã tiktok_accounts
        ("idx_tiktok_accounts_user", "CREATE INDEX IF NOT EXISTS idx_tiktok_accounts_user_id ON tiktok_accounts(user_id)"),
        ("idx_tiktok_accounts_username", "CREATE INDEX IF NOT EXISTS idx_tiktok_accounts_username ON tiktok_accounts(username)"),
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã referrals
        ("idx_referrals_referrer", "CREATE INDEX IF NOT EXISTS idx_referrals_referrer_id ON referrals(referrer_id)"),
        ("idx_referrals_referred", "CREATE INDEX IF NOT EXISTS idx_referrals_referred_id ON referrals(referred_id)"),
    ]
    
    logger.info("üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
    
    for index_name, query in indexes:
        try:
            await db.execute(query)
            logger.info(f"  ‚úÖ {index_name}")
        except Exception as e:
            logger.warning(f"  ‚ö†Ô∏è {index_name}: {e}")
    
    await db.commit()
    logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")


async def optimize_database_settings(db: aiosqlite.Connection):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ SQLite"""
    
    settings = [
        # WAL —Ä–µ–∂–∏–º –¥–ª—è –ª—É—á—à–µ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        ("PRAGMA journal_mode=WAL", "WAL mode"),
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        ("PRAGMA busy_timeout=30000", "Busy timeout"),
        
        # –ö—ç—à —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –ø–∞–º—è—Ç–∏ (10MB)
        ("PRAGMA cache_size=-10000", "Cache size"),
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (NORMAL - –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é)
        ("PRAGMA synchronous=NORMAL", "Synchronous mode"),
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        ("PRAGMA temp_store=MEMORY", "Temp store"),
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
        ("PRAGMA mmap_size=268435456", "Memory-mapped I/O (256MB)"),
    ]
    
    logger.info("‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î...")
    
    for query, description in settings:
        try:
            await db.execute(query)
            logger.info(f"  ‚úÖ {description}")
        except Exception as e:
            logger.warning(f"  ‚ö†Ô∏è {description}: {e}")
    
    await db.commit()
    logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")


async def analyze_database(db: aiosqlite.Connection):
    """–ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü"""
    
    logger.info("üîç –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # ANALYZE —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        await db.execute("ANALYZE")
        logger.info("  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞")
        
        # VACUUM –æ—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä—É–µ—Ç
        logger.info("  üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")
        await db.execute("VACUUM")
        logger.info("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")


async def get_database_stats(db: aiosqlite.Connection):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    
    tables = ['users', 'videos', 'youtube_channels', 'crypto_payouts', 'tiktok_accounts']
    
    for table in tables:
        try:
            cursor = await db.execute(f"SELECT COUNT(*) FROM {table}")
            count = await cursor.fetchone()
            logger.info(f"  ‚Ä¢ {table}: {count[0]} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            logger.warning(f"  ‚ö†Ô∏è {table}: {e}")
    
    # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        cursor = await db.execute("PRAGMA page_count")
        page_count = (await cursor.fetchone())[0]
        
        cursor = await db.execute("PRAGMA page_size")
        page_size = (await cursor.fetchone())[0]
        
        size_mb = (page_count * page_size) / (1024 * 1024)
        logger.info(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä –ë–î: {size_mb:.2f} MB")
    except Exception as e:
        logger.warning(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä: {e}")


async def check_indexes(db: aiosqlite.Connection):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"""
    
    logger.info("üîç –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã:")
    
    try:
        cursor = await db.execute(
            "SELECT name, tbl_name FROM sqlite_master WHERE type='index' AND name NOT LIKE 'sqlite_%'"
        )
        indexes = await cursor.fetchall()
        
        if indexes:
            for index_name, table_name in indexes:
                logger.info(f"  ‚Ä¢ {index_name} –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
        else:
            logger.info("  ‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    logger.info(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_PATH}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
    if not await create_backup():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.")
        return
    
    try:
        async with aiosqlite.connect(DATABASE_PATH, timeout=60.0) as db:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await get_database_stats(db)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
            await check_indexes(db)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
            await add_indexes(db)
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await optimize_database_settings(db)
            
            # –ê–Ω–∞–ª–∏–∑ –∏ –æ—á–∏—Å—Ç–∫–∞
            await analyze_database(db)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            logger.info("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            await get_database_stats(db)
            
        logger.info("\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
    except Exception as e:
        logger.error(f"\n‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        logger.error("üí° –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")


if __name__ == "__main__":
    asyncio.run(main())
