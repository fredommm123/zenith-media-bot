import re
from typing import Optional


def format_number(number: float, decimals: int = 2) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ"""
    return f"{number:,.{decimals}f}".replace(",", " ")


def format_currency(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É"""
    return f"{format_number(amount, 2)} ‚ÇΩ"


def validate_channel_id(channel_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞"""
    # –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @ –∏–ª–∏ –±—ã—Ç—å —á–∏—Å–ª–æ–º
    if channel_id.startswith("@"):
        return len(channel_id) > 1
    try:
        int(channel_id)
        return True
    except ValueError:
        return False


def validate_card_number(card_number: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã"""
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
    card_number = card_number.replace(" ", "")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ 16 —Ü–∏—Ñ—Ä
    return bool(re.match(r'^\d{16}$', card_number))


def validate_phone_number(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    phone = re.sub(r'[^\d+]', '', phone)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    return bool(re.match(r'^\+?[78]?\d{10}$', phone))


def format_card_number(card_number: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (—Å–∫—Ä—ã—Ç—å —Å—Ä–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã)"""
    card_number = card_number.replace(" ", "")
    if len(card_number) == 16:
        return f"{card_number[:4]} **** **** {card_number[-4:]}"
    return card_number


def format_phone_number(phone: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å–∫—Ä—ã—Ç—å —Å—Ä–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã)"""
    phone = re.sub(r'[^\d+]', '', phone)
    if len(phone) >= 11:
        return f"+{phone[0]}***{phone[-4:]}"
    return phone


def generate_referral_link(bot_username: str, user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"""
    return f"https://t.me/{bot_username}?start=ref_{user_id}"


def parse_referral_code(start_param: Optional[str]) -> Optional[int]:
    """–ü–∞—Ä—Å–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start"""
    if not start_param:
        return None
    
    if start_param.startswith("ref_"):
        try:
            return int(start_param[4:])
        except ValueError:
            return None
    
    return None


def calculate_pages(total_items: int, items_per_page: int = 10) -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    return max(1, (total_items + items_per_page - 1) // items_per_page)


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text


def format_timestamp(timestamp: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å timestamp"""
    from datetime import datetime
    try:
        dt = datetime.fromisoformat(timestamp)
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return timestamp


def get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    status_emojis = {
        "pending": "‚è≥",
        "processing": "üîÑ",
        "completed": "‚úÖ",
        "rejected": "‚ùå",
        "approved": "‚úÖ"
    }
    return status_emojis.get(status, "‚ùì")


def get_status_text(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞"""
    status_texts = {
        "pending": "–û–∂–∏–¥–∞–µ—Ç",
        "processing": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
        "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
        "rejected": "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
        "approved": "–û–¥–æ–±—Ä–µ–Ω–æ"
    }
    return status_texts.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


async def send_to_admin_chat(bot, text: str, reply_markup=None, parse_mode="HTML", edit_message_id=None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ"""
    from core import config
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-—á–∞—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if config.ADMIN_CHAT_ID:
        try:
            if edit_message_id:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                return await bot.edit_message_text(
                    text,
                    chat_id=config.ADMIN_CHAT_ID,
                    message_id=edit_message_id,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                return await bot.send_message(
                    config.ADMIN_CHAT_ID,
                    text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")
            return None
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω-—á–∞—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in config.ADMIN_IDS:
        try:
            if edit_message_id:
                await bot.edit_message_text(
                    text,
                    chat_id=admin_id,
                    message_id=edit_message_id,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            else:
                await bot.send_message(
                    admin_id,
                    text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    return None
