import asyncio
import os
import subprocess
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class DatabaseBackup:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ GitHub –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞"""
    
    def __init__(self, db_path: str = "bot_database.db", backup_interval: int = 86400):
        """
        Args:
            db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            backup_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –±—ç–∫–∞–ø–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞)
        """
        self.db_path = db_path
        self.backup_interval = backup_interval
        self.backup_dir = "backups"
        
    def create_backup_directory(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        if not os.path.exists(self.backup_dir):
            os.makedirs(self.backup_dir)
            logger.info(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±—ç–∫–∞–ø–æ–≤: {self.backup_dir}")
    
    def backup_database(self):
        """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞ GitHub"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
            if not os.path.exists(self.db_path):
                logger.warning(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.db_path}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
            self.create_backup_directory()
            
            # –ò–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"backup_{timestamp}.db"
            backup_path = os.path.join(self.backup_dir, backup_filename)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            import shutil
            shutil.copy2(self.db_path, backup_path)
            logger.info(f"‚úì –°–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø: {backup_path}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ GitHub
            self.upload_to_github(backup_path, timestamp)
            
            return True
            
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
            return False
    
    def upload_to_github(self, backup_path: str, timestamp: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±—ç–∫–∞–ø –Ω–∞ GitHub"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ git
            subprocess.run(["git", "add", backup_path], check=True, capture_output=True)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            commit_message = f"backup: Database backup {timestamp}"
            subprocess.run(
                ["git", "commit", "-m", commit_message],
                check=True,
                capture_output=True
            )
            
            # –ü—É—à–∏–º –Ω–∞ GitHub
            result = subprocess.run(
                ["git", "push"],
                check=True,
                capture_output=True,
                text=True
            )
            
            logger.info(f"‚úì –ë—ç–∫–∞–ø –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ GitHub: {backup_path}")
            logger.info(f"üì§ Commit: {commit_message}")
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ GitHub: {e}")
            if e.output:
                logger.error(f"Output: {e.output}")
    
    async def start_auto_backup(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞"""
        logger.info(f"üîÑ –ê–≤—Ç–æ–±—ç–∫–∞–ø –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.backup_interval / 3600:.1f} —á–∞—Å–æ–≤)")
        
        while True:
            try:
                # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –±—ç–∫–∞–ø —Å—Ä–∞–∑—É
                logger.info("üì¶ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...")
                self.backup_database()
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –±—ç–∫–∞–ø —á–µ—Ä–µ–∑ {self.backup_interval / 3600:.1f} —á–∞—Å–æ–≤")
                await asyncio.sleep(self.backup_interval)
                
            except Exception as e:
                logger.error(f"‚úó –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–±—ç–∫–∞–ø–∞: {e}")
                # –ñ–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(3600)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ bot.py
backup_manager = DatabaseBackup()
