import asyncio
import logging
from datetime import datetime
from typing import List, Tuple

from aiogram import Bot

from core.database import Database
from core.utils import send_to_admin_chat
from core import config

logger = logging.getLogger(__name__)


class MediaKeyDistributor:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –∫–ª—é—á–µ–π –º–µ–¥–∏–∞–ø–∞—Ä—Ç–Ω—ë—Ä–∞–º"""

    def __init__(
        self,
        db_path: str,
        min_videos: int = 2,
        period_days: int = 7,
        interval_hours: int = 24,
    ):
        self.db = Database(db_path)
        self.min_videos = min_videos
        self.period_days = period_days
        self.interval = interval_hours * 3600
        self._running = False

    async def start_auto_distribution(self, bot: Bot):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏"""
        if self._running:
            logger.warning("MediaKeyDistributor already running")
            return

        self._running = True
        logger.info(
            "üîë –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –∫–ª—é—á–µ–π –∑–∞–ø—É—â–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: %.1f —á–∞—Å–æ–≤)",
            self.interval / 3600,
        )

        while self._running:
            try:
                await self.distribute(bot)
            except Exception as exc:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–µ –∫–ª—é—á–µ–π: %s", exc)
            finally:
                await asyncio.sleep(self.interval)

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–∏–∫–ª –≤—ã–¥–∞—á–∏"""
        self._running = False

    async def distribute(self, bot: Bot):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é –≤—ã–¥–∞—á–∏ –∫–ª—é—á–µ–π"""
        eligible_users = await self.db.get_users_for_key_distribution(
            self.min_videos, self.period_days
        )

        if not eligible_users:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—è–º –≤—ã–¥–∞—á–∏ –∫–ª—é—á–µ–π")
            return

        available_keys = await self.db.count_available_media_keys()
        if available_keys <= 0:
            logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –≤—ã–¥–∞—á–∏")
            await send_to_admin_chat(
                bot,
                "‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—á–µ–π</b>\n"
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏.\n"
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
            )
            return

        assigned: List[Tuple[dict, dict]] = []

        for user in eligible_users:
            if available_keys <= 0:
                logger.info("–ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–¥–∞—á–∏")
                break

            key = await self.db.get_next_available_media_key()
            if not key:
                logger.info("–°–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
                break

            await self.db.mark_media_key_assigned(key["id"], user["user_id"])
            await self.db.update_user_last_key_issued(user["user_id"], datetime.utcnow())

            available_keys -= 1
            assigned.append((user, key))

            await self._notify_user(bot, user, key)

        if assigned:
            await self._notify_admin(bot, assigned)
        else:
            logger.info("–ù–∏–∫–æ–º—É –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–ª—é—á–∏ –≤ —ç—Ç–æ—Ç —Ü–∏–∫–ª")

    async def _notify_user(self, bot: Bot, user: dict, key: dict):
        text = (
            "üîë <b>–ù–æ–≤—ã–π –∫–ª—é—á –ø–∞—Ä—Ç–Ω—ë—Ä–∞</b>\n\n"
            f"–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {self.period_days} –¥–Ω–µ–π –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç!\n"
            f"–ö–ª—é—á –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:\n<code>{key['key_value']}</code>\n\n"
            "–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ–≥–æ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º."
        )
        try:
            await bot.send_message(user["user_id"], text, parse_mode="HTML")
        except Exception as exc:
            logger.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s",
                user["user_id"],
                exc,
            )

    async def _notify_admin(self, bot: Bot, assigned: List[Tuple[dict, dict]]):
        lines = [
            "‚úÖ <b>–í—ã–¥–∞—á–∞ –∫–ª—é—á–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>",
            f"üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {self.period_days} –¥–Ω–µ–π",
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(assigned)}",
            "",
        ]
        for user, key in assigned:
            username = user.get("username") or f"user_{user['user_id']}"
            lines.append(
                f"üîë <code>{key['key_value']}</code> ‚Üí {user['user_id']} (@{username})\n"
                f"   –í–∏–¥–µ–æ –∑–∞ –ø–µ—Ä–∏–æ–¥: {user.get('videos_count', 0)}"
            )

        await send_to_admin_chat(bot, "\n".join(lines))


media_key_manager = MediaKeyDistributor(db_path=config.DATABASE_PATH)
